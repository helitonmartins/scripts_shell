#!/bin/bash
#-------------------------------------------------------------------------
#  debian-wheezy
#
# Site  : http://wiki.dksh.com.br
# Author : Douglas Q. dos Santos <douglas.dksh@gmail.com>
# Management: Douglas Q. dos Santos <douglas.dksh@gmail.com>
#
#-------------------------------------------------------------------------
# Note: This Shell Script will set up the Bacula server base
# where will be installed the packages to run the Bacula Server
# properly and will install some report tools
#-------------------------------------------------------------------------
# History:
#
# Version 1:
# Data: 23/12/2015
# Description: Set up the initial configuration of Bacula Server on
# Debian GNU/Linux Wheezy
# Note: please use the following script to make sure that everything is ok.
# http://wiki.dksh.com.br/Downloads/scripts/ConfInicialWheezy.txt
# needs to convert the file like this: dos2unix ConfInicialWheezy.txt
#--------------------------------------------------------------------------
#License: http://creativecommons.org/licenses/by-sa/3.0/legalcode
#
#--------------------------------------------------------------------------
clear

### PASSWORDS USED BY THE SCRIPT, THEY WILL BE STORED IN THE PASSWORD LOG FILE
DB_PASSWORD=$(cat /dev/urandom | hexdump -n 30| cut -d \  -f 2-| head -n 1 | tr -d " ")
PG_PASSWORD=$(cat /dev/urandom | hexdump -n 30| cut -d \  -f 2-| head -n 1 | tr -d " ")
MYSQL_PASSWORD=$(cat /dev/urandom | hexdump -n 30| cut -d \  -f 2-| head -n 1 | tr -d " ")
BDMON_PASSWORD=$(cat /dev/urandom | hexdump -n 30| cut -d \  -f 2-| head -n 1 | tr -d " ")
BCONSOLE_PASSWORD=$(cat /dev/urandom | hexdump -n 30| cut -d \  -f 2-| head -n 1 | tr -d " ")
BFD_PASSWORD=$(cat /dev/urandom | hexdump -n 30| cut -d \  -f 2-| head -n 1 | tr -d " ")
BFDMON_PASSWORD=$(cat /dev/urandom | hexdump -n 30| cut -d \  -f 2-| head -n 1 | tr -d " ")
BSD_PASSWORD=$(cat /dev/urandom | hexdump -n 30| cut -d \  -f 2-| head -n 1 | tr -d " ")
BSDMON_PASSWORD=$(cat /dev/urandom | hexdump -n 30| cut -d \  -f 2-| head -n 1 | tr -d " ")

### BACULA SERVER IP
BACULA_IP="127.0.0.1"
#BACULA_IP=$(hostname -i)

### BACULA SERVER NAME
CLIENT="bacula-fd"

### BACULA BASE PATHS
BACULA_BASE="/etc/bacula"
BACULA_WD="/var/lib/bacula"
BACULA_PID="/var/run/bacula"
BACULA_LOG="/var/log/bacula"
BACULA_ST="/srv/backup"
BACULA_SCRIPTS="/srv/scripts"
BACULA_PKG="/srv/packages"
BBCLIENTS="${BACULA_BASE}/keys/clients"
CLIENTS="/srv/Clients-Windows/"


### SOME COMMANDS USED IN THE SCRIPT
CAT="/bin/cat"
CD="cd"
RM="/bin/rm"
OPENSSL="/usr/bin/openssl"
APTITUDE="/usr/bin/aptitude"
SED="/bin/sed"
CAT="/bin/cat"
SU="/bin/su"
MV="/bin/mv"
MKDIR="/bin/mkdir"
USERADD="/usr/sbin/useradd"
CHOWN="/bin/chown"
CHMOD="/bin/chmod"
CP="/bin/cp"
ECHO="/bin/echo"
WGET="/usr/bin/wget"
TAR="/bin/tar"
MAKE="/usr/bin/make"
USERMOD="/usr/sbin/usermod"
PATCH="/usr/bin/patch"
POSTMAP="/usr/sbin/postmap"
CRONTAB="/usr/bin/crontab"
HTPASSWD="/usr/bin/htpasswd"
A2DISSITE="/usr/sbin/a2dissite"
A2ENSITE="/usr/sbin/a2ensite"
A2ENMOD="/usr/sbin/a2enmod"

### DOMAIN AND EMAIL AND KEYS FOR CERTIFICATE
DOMAIN="dksh.com.br"
EMAIL_CERT="username@gmail.com"
COUNTRY_2LT="BR"
STATE="Parana"
CITY="Curitiba"
ORG="DKSH"
OU="IT"

### BACKUP PLUS
LOGS_BKP_PLUS="/tmp/logs_bkp_plus.log"
EMAIL_NOTIFICATION="username@gmail.com"
BKP_PLUS_PATH="/srv/bkp_plus"
BACULA_CLEAN_CACHE="${BACULA_SCRIPTS}/clean_up_cache.sh"
BACULA_BKP_FILES="${BACULA_SCRIPTS}/bkp_plus.sh"

### GMAIL CONFIGURATION TO NOTIFICATION
# TO USE A GMAIL ACOUT YOU NEED TO ACCESS: https://myaccount.google.com/security?pli=1
# AND SET Allow less secure apps: ON
### TODO
GMAIL_USER="username@gmail.com"
GMAIL_PASSWORD="password"
GMAIL_RELAY_HOST="[smtp.gmail.com]:587"
GMAIL_DEBUG="smtp.gmail.com"
MAIN_CF_PATH="/etc/postfix/main.cf"
SASL_PASSWD="/etc/postfix/sasl_passwd"

### BACULA WEB PASSWORD
BACULA_WEB_PASSWORD="bac@134*"
BACULA_WEB_USER="bacula"

### WEB BACULA PASSWORD
WEB_BACULA_PASSWORD="bac@134*"

### PACKAGES
BACULA_SOURCES="http://wiki.dksh.com.br/Downloads/bacula/bacula-7.0.5.tar.gz"
BACULA_WEB_SOURCES="http://wiki.dksh.com.br/Downloads/bacula/bacula-web-latest.tgz"
WEB_BACULA_SOURCES="http://wiki.dksh.com.br/Downloads/bacula/webacula-5.5.1.tar.gz"
BACULA_WIN32="http://wiki.dksh.com.br/Downloads/bacula/bacula-win32-5.2.10.exe"
BACULA_WIN64="http://wiki.dksh.com.br/Downloads/bacula/bacula-win64-5.2.10.exe"

### COLORS USED
GREEN="\033[01;32m" RED="\033[01;31m" YELLOW="\033[01;33m" CLOSE="\033[m"

### LOG FILES
PASSWORD_LOG="passwords.txt"

### SAVING THE PASSWORDS IN THE LOG FILE
${ECHO} -e "${GREEN} SAVING THE PASSWORDS IN THE LOG FILE ${CLOSE}"
${ECHO} "PASSWORDS " >> ${PASSWORD_LOG}
${ECHO} "PostgreSQL:  ${PG_PASSWORD}" >> ${PASSWORD_LOG}
${ECHO} "Bacula on PostgreSQL:  ${DB_PASSWORD}" >> ${PASSWORD_LOG}
${ECHO} "Bacula-mon: ${BDMON_PASSWORD}" >> ${PASSWORD_LOG}
${ECHO} "Bconsole: ${BCONSOLE_PASSWORD}" >> ${PASSWORD_LOG}
${ECHO} "Bacula-fd: ${BFD_PASSWORD}" >> ${PASSWORD_LOG}
${ECHO} "Bacula-fd-mon: ${BFDMON_PASSWORD}" >> ${PASSWORD_LOG}
${ECHO} "Bacula-sd: ${BSD_PASSWORD}" >> ${PASSWORD_LOG}
${ECHO} "Bacula-sd-mon: ${BSDMON_PASSWORD}" >> ${PASSWORD_LOG}
${ECHO} "Bacula Web User: ${BACULA_WEB_USER} password: ${BACULA_WEB_PASSWORD}" >> ${PASSWORD_LOG}
${ECHO} "Web Bacula User: root password:  ${WEB_BACULA_PASSWORD}" >> ${PASSWORD_LOG}
${ECHO} "http://webacula.${DOMAIN} TO $(hostname -i)" >> ${PASSWORD_LOG}
${ECHO} "http://bacula-web.${DOMAIN} TO $(hostname -i)" >> ${PASSWORD_LOG}


### UPDATING THE REPOSITORIES
${ECHO} -e "${GREEN} UPDATING THE REPOSITORIES ${CLOSE}"
${APTITUDE} update || { ${ECHO} -e "${RED}FAILED TO UPDATE THE REPOSITORIES ${CLOSE}"; exit 1; }

### INSTALLING THE DEPENDENCIES
${ECHO} -e "${GREEN} INSTALLING THE DEPENDENCIES ${CLOSE}"
${APTITUDE} install libreadline-dev libreadline6-dev postgresql postgresql-client postgresql-common postgresql-contrib liblzo2-2 liblzo2-dev libsasl2-modules \
postgresql-doc postgresql-server-dev-all  postgresql-server-dev-9.1 libreadline6-dev libreadline6 lib32readline6 lib32readline6-dev makepasswd postfix \
libclass-dbi-pg-perl libcompress-zlib-perl zlib-bin zlib1g-dev libio-compress-zlib-perl libghc-zlib-dev libssl-dev acl-dev libacl1-dev -y || { ${ECHO} -e "${RED}FAILED IN INSTALL THE DEPENDENCIES ${CLOSE}"; exit 1; }


### ADJUSTING THE POSTGRESQL LISTENER
${ECHO} -e "${GREEN} ADJUSTING THE POSTGRESQL LISTENER ${CLOSE}"
${SED} -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" /etc/postgresql/9.1/main/postgresql.conf
/etc/init.d/postgresql restart


### CREATING THE DATABASE FILE
${ECHO} -e "${GREEN} CREATING THE DATABASE FILE AND IMPORTING ${CLOSE}"
${CAT} << EOF > /tmp/base.sql
ALTER USER postgres WITH PASSWORD '${PG_PASSWORD}';
CREATE USER bacula WITH PASSWORD '${DB_PASSWORD}';
CREATE DATABASE bacula WITH OWNER bacula ENCODING 'SQL_ASCII' TEMPLATE=template0;
EOF

### IMPORTING THE DATABASE CONFIGURATION FILE
${ECHO} -e "${GREEN} IMPORTING THE DATABASE CONFIGURATION FILE ${CLOSE}"
${SU} postgres -c 'psql -f /tmp/base.sql' || { ${ECHO} -e "${RED}FALHA AO CARREGAR O BANCO DE DADOS ${CLOSE}"; exit 1; }

### CREATING THE BACULA DIRECTORY STRUCTURE
${ECHO} -e "${GREEN} CREATING THE BACULA DIRECTORY STRUCTURE ${CLOSE}"
${MKDIR} ${BACULA_WD}
${MKDIR} ${BACULA_PID}
${MKDIR} ${BACULA_LOG}
${MKDIR} ${BACULA_PKG}
${MKDIR} -p ${BACULA_SCRIPTS}
${MKDIR} -p ${BACULA_BASE}/scripts
${MKDIR} ${BACULA_BASE}/{clients-jobs,devices,filesets,jobsdef,keys,pools,schedules,storages}
${MKDIR} ${BACULA_BASE}/keys/clients
${MKDIR} -p ${CLIENTS}

### CREATING THE BACULA USER AND CHANGING THE PERMISSIONS
${ECHO} -e "${GREEN} CREATING THE BACULA USER AND CHANGING THE PERMISSIONS ${CLOSE}"
${USERADD} -s /bin/bash -d ${BACULA_WD}  bacula
${CHOWN} -R bacula:bacula ${BACULA_WD} ${BACULA_PID} ${BACULA_LOG} ${BACULA_BASE}

### GETTING THE BACULA SOURCES
${ECHO} -e "${GREEN} GETTING THE BACULA SOURCES ${CLOSE}"
${CD} /usr/src
${WGET} -c  ${BACULA_SOURCES} || { ${ECHO} -e "${RED}FAILED ON GET BACULA SOURCES ${CLOSE}"; exit 1; }

### DECOMPRESSING THE SOURCES
${ECHO} -e "${GREEN} DECOMPRESSING THE SOURCES ${CLOSE} "
${TAR} -xzvf bacula-7.0.5.tar.gz
${CD}  bacula-7.0.5

### CONFIGURING THE SOURCES
${ECHO} -e "${GREEN} CONFIGURING THE SOURCES ${CLOSE}"
CFLAGS="-g -Wall" ./configure --with-openssl=yes --enable-smartalloc --with-postgresql  --with-db-name=bacula --with-db-user=bacula \
--with-db-password=${DB_PASSWORD} --with-db-port=5432 --with-working-dir=${BACULA_WD} --with-pid-dir=${BACULA_PID} --with-logdir=${BACULA_LOG} \
--with-readline=/usr/include/readline  --disable-conio --enable-lockmgr --with-scriptdir=${BACULA_BASE}/scripts

### COMPILING THE SOURCES
${ECHO} -e "${GREEN} COMPILING THE SOURCES ${CLOSE}"
${MAKE}

### INSTALLING THE BACULA
${ECHO} -e "${GREEN} INSTALLING THE BACULA ${CLOSE}"
${MAKE} install

### INSTALLING THE BACULA LAUCHERS
${ECHO} -e "${GREEN} INSTALLING THE BACULA LAUCHERS ${CLOSE}"
${MAKE} install-autostart

### CHANGING THE BACULA DIRECTORY BASE PERMISSIONS
${ECHO} -e "${GREEN} CHANGING THE BACULA DIRECTORY BASE PERMISSIONS ${CLOSE}"
${CHOWN} -R bacula:bacula ${BACULA_BASE}

### LOADING THE BACULA TABLES STRUCTURE
${ECHO} -e "${GREEN} LOADING THE BACULA TABLES STRUCTURE ${CLOSE} "
${SU} - bacula -c "${BACULA_BASE}/scripts/make_postgresql_tables -U bacula -d bacula" || { ${ECHO} -e "${RED}FAILED ON LOADING THE BACULA TABLES STRUCTURE ${CLOSE}"; exit 1; }

### CHANGING THE BACULA SHELL
${ECHO} -e "${GREEN} CHANGING THE BACULA SHELL ${CLOSE}"
${USERMOD} -s /bin/false bacula

### CREATING A BACKUP OF THE ORIGINAL FILES
${ECHO} -e "${GREEN} CREATING A BACKUP OF THE ORIGINAL FILES ${CLOSE}"
${MKDIR} /usr/src/olds
${CP} -Rfa ${BACULA_BASE} /usr/src/olds

### CREATING THE VOLUME DIRECTORY AND CHANGING THE PERMISSIONS OF IT
${ECHO} -e "${GREEN} CREATING THE VOLUME DIRECTORY AND CHANGING THE PERMISSIONS OF IT ${CLOSE}"
${MKDIR} -p ${BACULA_ST}/default
${CHOWN} bacula:tape ${BACULA_ST}
${CHOWN} -R bacula:bacula ${BACULA_BASE}


### CREATING THE bacula-dir.conf FILE
${ECHO} -e "${GREEN} CREATING THE bacula-dir.conf FILE ${CLOSE}"

${CAT} << EOF > ${BACULA_BASE}/bacula-dir.conf
# ${BACULA_BASE}/bacula-dir.conf
# http://www.bacula.org/5.2.x-manuals/en/main/main/Contents.html
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001420000000000000000
# OF ALL THE CONFIGURATION FILES NEEDED TO RUN BACULA, THE DIRECTOR'S IS THE MOST COMPLICATED,
# AND THE ONE THAT YOU WILL NEED TO MODIFY THE MOST OFTEN AS YOU ADD CLIENTS OR MODIFY THE FILESETS.
### DEFINE CONFIGURATION FOR DIRECTOR SERVER
Director {
  # THE DIRECTOR NAME USED BY THE SYSTEM ADMINISTRATOR.
  Name = bacula-dir
  # SPECIFY THE PORT (A POSITIVE INTEGER) ON WHICH THE DIRECTOR DAEMON WILL LISTEN FOR BACULA CONSOLE CONNECTIONS.
  DIRport = 9101
  # THIS DIRECTIVE IS MANDATORY AND SPECIFIES A DIRECTORY AND FILE IN WHICH THE DIRECTOR CAN FIND THE CANNED SQL STATEMENTS FOR THE QUERY COMMAND OF THE CONSOLE.
  QueryFile = "${BACULA_BASE}/scripts/query.sql"
  # THIS DIRECTIVE IS MANDATORY AND SPECIFIES A DIRECTORY IN WHICH THE DIRECTOR MAY PUT ITS STATUS FILES.
  WorkingDirectory = "${BACULA_WD}"
  # THIS DIRECTIVE IS MANDATORY AND SPECIFIES A DIRECTORY IN WHICH THE DIRECTOR MAY PUT ITS PROCESS ID FILE.
  PidDirectory = "${BACULA_PID}"
  # WHERE NUMBER IS THE MAXIMUM NUMBER OF TOTAL DIRECTOR JOBS THAT SHOULD RUN CONCURRENTLY.
  Maximum Concurrent Jobs = 20
  # SPECIFIES THE PASSWORD THAT MUST BE SUPPLIED FOR THE DEFAULT BACULA CONSOLE TO BE AUTHORIZED.
  Password = "${BCONSOLE_PASSWORD}"
  # THE MESSAGES RESOURCE SPECIFIES WHERE TO DELIVER DIRECTOR MESSAGES THAT ARE NOT ASSOCIATED WITH A SPECIFIC JOB.
  Messages = Daemon
}

### DATABASE CONFIGURATION FOR CATALOG SERVICE
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION0014160000000000000000
Catalog {
  # THE NAME OF THE CATALOG. NO NECESSARY RELATION TO THE DATABASE SERVER NAME.
  Name = Catalog
  # THIS SPECIFIES THE NAME OF THE DATABASE. IF YOU USE MULTIPLE CATALOGS (DATABASES), YOU SPECIFY WHICH ONE HERE.
  dbname = "bacula"; dbaddress = "localhost";  dbuser = "bacula"; dbpassword = "${DB_PASSWORD}"
}

### DEFINE AS MESSAGES WILL BE DELIVERED ###
# http://www.bacula.org/5.2.x-manuals/en/main/main/Messages_Resource.html
Messages {
  # THE NAME OF THE MESSAGES RESOURCE.
  Name = Standard
  # IN THE ABSENCE OF THIS RESOURCE, BACULA WILL SEND ALL MAIL USING THE FOLLOWING COMMAND: (mail -s "Bacula Message" recipients)
  mailcommand = "/sbin/bsmtp -h localhost -f \"\(Bacula\) \<%r\>\" -s \"Bacula ${ORG}: %t %e of %c %l\" %r"
  # THIS RESOURCE SPECIFICATION IS SIMILAR TO THE MAILCOMMAND EXCEPT THAT IT IS USED FOR OPERATOR MESSAGES.
  operatorcommand = "/sbin/bsmtp -h localhost -f \"\(Bacula\) \<%r\>\" -s \"Bacula ${ORG}: Intervention needed for %j\" %r"
  # SEND THE MESSAGE TO THE EMAIL ADDRESSES THAT ARE GIVEN AS A COMMA SEPARATED LIST IN THE ADDRESS FIELD.
  mail = ${EMAIL_NOTIFICATION} = all, !skipped
  # SEND THE MESSAGE TO THE EMAIL ADDRESSES THAT ARE SPECIFIED AS A COMMA SEPARATED LIST IN THE ADDRESS FIELD.
  operator = root@localhost = mount
  # SEND THE MESSAGE TO THE BACULA CONSOLE.
  console = all, !skipped, !saved
  # APPEND THE MESSAGE TO THE FILENAME GIVEN IN THE ADDRESS FIELD.
  append = "${BACULA_LOG}/bacula.log" = all, !skipped
  # SEND THE MESSAGE TO THE CATALOG DATABASE.
  catalog = all
}

### DEFINE AS MESSAGES WILL BE DELIVERED FOR DAEMON MESSAGES DON'T JOB
Messages {
  # THE NAME OF THE MESSAGES RESOURCE.
  Name = Daemon
  # IN THE ABSENCE OF THIS RESOURCE, BACULA WILL SEND ALL MAIL USING THE FOLLOWING COMMAND: (mail -s "Bacula Message" recipients)
  mailcommand = "/sbin/bsmtp -h localhost -f \"\(Bacula\) \<%r\>\" -s \"Bacula daemon message\" %r"
  # SEND THE MESSAGE TO THE EMAIL ADDRESSES THAT ARE GIVEN AS A COMMA SEPARATED LIST IN THE ADDRESS FIELD.
  mail = ${EMAIL_NOTIFICATION} = all, !skipped
  # SEND THE MESSAGE TO THE BACULA CONSOLE.
  console = all, !skipped, !saved
  # APPEND THE MESSAGE TO THE FILENAME GIVEN IN THE ADDRESS FIELD.
  append = "${BACULA_LOG}/bacula.log" = all, !skipped
}

### RESTRICTED CONSOLE USED BY TRAY-MONITOR TO GET THE STATUS OF THE DIRECTOR
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION0014180000000000000000
Console {
  # THE NAME OF THE CONSOLE. THIS NAME MUST MATCH THE NAME SPECIFIED IN THE CONSOLE'S CONFIGURATION RESOURCE
  # (MUCH AS IS THE CASE WITH CLIENT DEFINITIONS).
  Name = bacula-mon
  # SPECIFIES THE PASSWORD THAT MUST BE SUPPLIED FOR A NAMED BACULA CONSOLE TO BE AUTHORIZED.
  Password = "${BDMON_PASSWORD}"
  # THIS DIRECTIVE IS USED TO SPECIFY A LIST OF OF CONSOLE COMMANDS THAT CAN BE EXECUTED BY THE CONSOLE.
  CommandACL = status, .status
}

### PLEASE PUT ALL INCLUDE FILES BELOW

# INCLUDING CLIENTS AND JOBS CONFIGURATION FILES
@|"sh -c 'for f in ${BACULA_BASE}/clients-jobs/*.conf ; do echo @\${f} ; done'"

# INCLUDING POOLS CONFIGURATION FILES
@|"sh -c 'for f in ${BACULA_BASE}/pools/*.conf ; do echo @\${f} ; done'"

# INCLUDING STORAGES CONFIGURATION FILES
@|"sh -c 'for f in ${BACULA_BASE}/storages/*.conf ; do echo @\${f} ; done'"

# INCLUDING JOBSDEF CONFIGURATION FILES
@|"sh -c 'for f in ${BACULA_BASE}/jobsdef/*.conf ; do echo @\${f} ; done'"

# INCLUDING SCHEDULES CONFIGURATION FILES
@|"sh -c 'for f in ${BACULA_BASE}/schedules/*.conf ; do echo @\${f} ; done'"

# INCLUDING FILESETS CONFIGURATION FILES
@|"sh -c 'for f in ${BACULA_BASE}/filesets/*.conf ; do echo @\${f} ; done'"
EOF


### CREATING THE bacula-fd.conf FILE
${ECHO} -e "${GREEN} CREATING THE bacula-fd.conf FILE ${CLOSE}"

${CAT} << EOF > ${BACULA_BASE}/bacula-fd.conf
# ${BACULA_BASE}/bacula-fd.conf
# http://www.bacula.org/5.2.x-manuals/en/main/main/Client_File_daemon_Configur.html
# THE CLIENT (OR FILE DAEMON) CONFIGURATION IS ONE OF THE SIMPLER ONES TO SPECIFY.
# GENERALLY, OTHER THAN CHANGING THE CLIENT NAME SO THAT ERROR MESSAGES ARE EASILY IDENTIFIED,
# YOU WILL NOT NEED TO MODIFY THE DEFAULT CLIENT CONFIGURATION FILE.
# LIST DIRECTORS WHO ARE PERMITTED TO CONTACT THIS FILE DAEMON
Director {
  # THE NAME OF THE DIRECTOR THAT MAY CONTACT THIS CLIENT.
  Name = bacula-dir
  # SPECIFIES THE PASSWORD THAT MUST BE SUPPLIED FOR A DIRECTOR TO BE AUTHORIZED.
  Password = "${BFD_PASSWORD}"
}

# RESTRICTED DIRECTOR, USED BY TRAY-MONITOR TO GET THE
# STATUS OF THE FILE DAEMON
# http://www.bacula.org/5.2.x-manuals/en/main/main/Monitor_Configuration.html
Director {
  # THE CLIENT NAME USED TO IDENTIFY THE DIRECTOR IN THE LIST OF MONITORED DAEMONS.
  Name = bacula-mon
  # THIS IS THE PASSWORD TO BE USED WHEN ESTABLISHING A CONNECTION WITH THE FILE SERVICES,
  # SO THE CLIENT CONFIGURATION FILE ON THE MACHINE TO BE BACKED UP MUST HAVE THE SAME PASSWORD DEFINED FOR THIS DIRECTOR.
  Password = "${BFDMON_PASSWORD}"
  # IF MONITOR IS SET TO NO (DEFAULT), THIS DIRECTOR WILL HAVE FULL ACCESS TO THIS STORAGE DAEMON.
  # IF MONITOR IS SET TO YES, THIS DIRECTOR WILL ONLY BE ABLE TO FETCH THE CURRENT STATUS OF THIS STORAGE DAEMON.
  Monitor = yes
}

# "GLOBAL" FILE DAEMON CONFIGURATION SPECIFICATIONS
# http://www.bacula.org/5.2.x-manuals/en/main/main/Data_Encryption.html
FileDaemon {
  # THE CLIENT NAME THAT MUST BE USED BY THE DIRECTOR WHEN CONNECTING.
  Name = bacula-fd
  # THIS SPECIFIES THE PORT NUMBER ON WHICH THE CLIENT LISTENS FOR DIRECTOR CONNECTIONS.
  FDport = 9102
  # THIS DIRECTIVE IS MANDATORY AND SPECIFIES A DIRECTORY IN WHICH THE FILE DAEMON MAY PUT ITS STATUS FILES.
  WorkingDirectory = "${BACULA_WD}"
  # THIS DIRECTIVE IS MANDATORY AND SPECIFIES A DIRECTORY IN WHICH THE DIRECTOR MAY PUT ITS PROCESS ID FILE FILES.
  Pid Directory = "${BACULA_PID}"
  # WHERE NUMBER IS THE MAXIMUM NUMBER OF JOBS THAT SHOULD RUN CONCURRENTLY.
  Maximum Concurrent Jobs = 20
  # SPECIFY THE PORTS AND ADDRESSES ON WHICH THE FILE DAEMON LISTENS FOR DIRECTOR CONNECTIONS.
  FDAddress = 0.0.0.0
  # ENABLE DATA SIGNING
  PKI Signatures = Yes
  # ENABLE DATA ENCRYPTION
  PKI Encryption = Yes
  # PUBLIC AND PRIVATE KEYS
  PKI Keypair = "${BACULA_BASE}/keys/clients/${CLIENT}/bacula-fd.pem"
  # ONLY THE PUBLIC KEY
  PKI Master Key = "${BACULA_BASE}/keys/master.cert"
}

# SEND ALL MESSAGES EXCEPT SKIPPED FILES BACK TO DIRECTOR
Messages {
  # THE NAME OF THE MESSAGES RESOURCE.
  Name = Standard
  # SEND THE MESSAGE TO THE DIRECTOR WHOSE NAME IS GIVEN IN THE ADDRESS FIELD.
  director = bacula-dir = all, !skipped, !restored
}
EOF

### CREATING THE bacula-sd.conf FILE
${ECHO} -e "${GREEN} CREATING THE bacula-sd.conf FILE ${CLOSE}"

${CAT} << EOF > ${BACULA_BASE}/bacula-sd.conf
# ${BACULA_BASE}/bacula-sd.conf
# http://www.bacula.org/5.2.x-manuals/en/main/main/Storage_Daemon_Configuratio.html
# THE STORAGE DAEMON CONFIGURATION FILE HAS RELATIVELY FEW RESOURCE DEFINITIONS.
# HOWEVER, DUE TO THE GREAT VARIATION IN BACKUP MEDIA AND SYSTEM CAPABILITIES, THE STORAGE DAEMON MUST BE HIGHLY CONFIGURABLE.
# AS A CONSEQUENCE, THERE ARE QUITE A LARGE NUMBER OF DIRECTIVES IN THE DEVICE RESOURCE DEFINITION THAT ALLOW YOU TO DEFINE ALL
# THE CHARACTERISTICS OF YOUR STORAGE DEVICE (NORMALLY A TAPE DRIVE).
Storage {
  # SPECIFIES THE NAME OF THE STORAGE DAEMON.
  Name = bacula-sd
  # SPECIFIES PORT NUMBER ON WHICH THE STORAGE DAEMON LISTENS FOR DIRECTOR CONNECTIONS.
  SDPort = 9103
  # THIS DIRECTIVE IS MANDATORY AND SPECIFIES A DIRECTORY IN WHICH THE STORAGE DAEMON MAY PUT ITS STATUS FILES.
  WorkingDirectory = "${BACULA_WD}"
  # THIS DIRECTIVE IS MANDATORY AND SPECIFIES A DIRECTORY IN WHICH THE DIRECTOR MAY PUT ITS PROCESS ID FILE FILES.
  Pid Directory = "${BACULA_PID}"
  # WHERE NUMBER IS THE MAXIMUM NUMBER OF JOBS THAT MAY RUN CONCURRENTLY.
  Maximum Concurrent Jobs = 20
  # SPECIFY THE PORTS AND ADDRESSES ON WHICH THE STORAGE DAEMON WILL LISTEN FOR DIRECTOR CONNECTIONS.
  SDAddress = 0.0.0.0
}

# LIST DIRECTORS WHO ARE PERMITTED TO CONTACT STORAGE DAEMON
Director {
  # SPECIFIES THE NAME OF THE DIRECTOR ALLOWED TO CONNECT TO THE STORAGE DAEMON.
  Name = bacula-dir
  # SPECIFIES THE PASSWORD THAT MUST BE SUPPLIED BY THE ABOVE NAMED DIRECTOR.
  Password = "${BSD_PASSWORD}"
}


# RESTRICTED DIRECTOR, USED BY TRAY-MONITOR TO GET THE
# STATUS OF THE STORAGE DAEMON
Director {
  # SPECIFIES THE NAME OF THE DIRECTOR ALLOWED TO CONNECT TO THE STORAGE DAEMON.
  Name = bacula-mon
  # SPECIFIES THE PASSWORD THAT MUST BE SUPPLIED BY THE ABOVE NAMED DIRECTOR.
  Password = "${BSDMON_PASSWORD}"
  # IF MONITOR IS SET TO NO (DEFAULT), THIS DIRECTOR WILL HAVE FULL ACCESS TO THIS STORAGE DAEMON.
  # IF MONITOR IS SET TO YES, THIS DIRECTOR WILL ONLY BE ABLE TO FETCH THE CURRENT STATUS OF THIS STORAGE DAEMON.
  Monitor = yes
}

# SEND ALL MESSAGES TO THE DIRECTOR,
# MOUNT MESSAGES ALSO ARE SENT TO THE EMAIL ADDRESS
Messages {
  # THE NAME OF THE MESSAGES RESOURCE.
  Name = Standard
  # SEND THE MESSAGE TO THE DIRECTOR WHOSE NAME IS GIVEN IN THE ADDRESS FIELD.
  director = bacula-dir = all
}

# INCLUDING STORAGES CONFIGURATION FILES
@|"sh -c 'for f in ${BACULA_BASE}/devices/*.conf ; do echo @\${f} ; done'"
EOF


### CREATING THE bconsole.conf FILE
${ECHO} -e "${GREEN} CREATING THE bconsole.conf FILE ${CLOSE}"

${CAT} << EOF > ${BACULA_BASE}/bconsole.conf
# ${BACULA_BASE}/bconsole.conf
# http://www.bacula.org/5.2.x-manuals/en/main/main/Console_Configuration.html#SECTION001920000000000000000
# THE CONSOLE CONFIGURATION FILE IS THE SIMPLEST OF ALL THE CONFIGURATION FILES, AND IN GENERAL, YOU SHOULD NOT NEED TO CHANGE IT
# EXCEPT FOR THE PASSWORD. IT SIMPLY CONTAINS THE INFORMATION NECESSARY TO CONTACT THE DIRECTOR OR DIRECTORS.
Director {
  # THE DIRECTOR NAME USED TO SELECT AMONG DIFFERENT DIRECTORS, OTHERWISE, THIS NAME IS NOT USED.
  Name = bacula-dir
  # SPECIFY THE PORT TO USE TO CONNECT TO THE DIRECTOR.
  DIRport = 9101
  # WHERE THE ADDRESS IS A HOST NAME, A FULLY QUALIFIED DOMAIN NAME, OR A NETWORK ADDRESS USED TO CONNECT TO THE DIRECTOR.
  Address = ${BACULA_IP}
  # WHERE THE PASSWORD IS THE PASSWORD NEEDED FOR THE DIRECTOR TO ACCEPT THE CONSOLE CONNECTION.
  Password = "${BCONSOLE_PASSWORD}"
}
EOF


### CREATING THE RETENTION FILES
${ECHO} -e "${GREEN} CREATING THE RETENTION FILES ${CLOSE}"

${CAT} << EOF > ${BACULA_BASE}/clients-jobs/monthly-client
# ${BACULA_BASE}/clients-jobs/monthly-client
# http://www.bacula.org/5.2.x-manuals/en/main/main/Catalog_Maintenance.html
# BACULA USES THREE RETENTION PERIODS: THE FILE RETENTION PERIOD, THE JOB RETENTION PERIOD, AND THE VOLUME RETENTION PERIOD.
# OF THESE THREE, THE FILE RETENTION PERIOD IS BY FAR THE MOST IMPORTANT IN DETERMINING HOW LARGE YOUR DATABASE WILL BECOME.
  # CATALOG NAME
  Catalog = Catalog
  # THE FILE RETENTION RECORD DEFINES THE LENGTH OF TIME THAT BACULA WILL KEEP FILE RECORDS IN THE CATALOG DATABASE.
  File Retention = 30 days
  # THE JOB RETENTION RECORD DEFINES THE LENGTH OF TIME THAT BACULA WILL KEEP JOB RECORDS IN THE CATALOG DATABASE.
  Job Retention = 1 month
  # IF AUTOPRUNE IS SET TO YES (DEFAULT), BACULA WILL AUTOMATICALLY APPLY THE FILE RETENTION PERIOD AND
  # THE JOB RETENTION PERIOD FOR THE CLIENT AT THE END OF THE JOB.
  # IF YOU TURN THIS OFF BY SETTING IT TO NO, YOUR CATALOG WILL GROW EACH TIME YOU RUN A JOB.
  AutoPrune = yes                                 # IF THE JOBS/FILE CAN BE PRUNE
EOF

${CAT} << EOF > ${BACULA_BASE}/clients-jobs/weekly-client
# ${BACULA_BASE}/clients-jobs/weekly-client
# http://www.bacula.org/5.2.x-manuals/en/main/main/Catalog_Maintenance.html
# BACULA USES THREE RETENTION PERIODS: THE FILE RETENTION PERIOD, THE JOB RETENTION PERIOD, AND THE VOLUME RETENTION PERIOD.
# OF THESE THREE, THE FILE RETENTION PERIOD IS BY FAR THE MOST IMPORTANT IN DETERMINING HOW LARGE YOUR DATABASE WILL BECOME.
  # CATALOG NAME
  Catalog = Catalog
  # THE FILE RETENTION RECORD DEFINES THE LENGTH OF TIME THAT BACULA WILL KEEP FILE RECORDS IN THE CATALOG DATABASE.
  File Retention = 7 days
  # THE JOB RETENTION RECORD DEFINES THE LENGTH OF TIME THAT BACULA WILL KEEP JOB RECORDS IN THE CATALOG DATABASE.
  Job Retention = 7 days
  # IF AUTOPRUNE IS SET TO YES (DEFAULT), BACULA WILL AUTOMATICALLY APPLY THE FILE RETENTION PERIOD AND
  # THE JOB RETENTION PERIOD FOR THE CLIENT AT THE END OF THE JOB.
  # IF YOU TURN THIS OFF BY SETTING IT TO NO, YOUR CATALOG WILL GROW EACH TIME YOU RUN A JOB.
  AutoPrune = yes
EOF


### CREATING THE BACULA DIRECTORY JOB FILE
${ECHO} -e "${GREEN} CREATING THE BACULA DIRECTORY JOB FILE ${CLOSE}"

${CAT} << EOF > ${BACULA_BASE}/clients-jobs/director-jobs.conf
# ${BACULA_BASE}/clients-jobs/director-jobs.conf
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001430000000000000000
# THE JOB RESOURCE DEFINES A JOB (BACKUP, RESTORE, ...) THAT BACULA MUST PERFORM.
# EACH JOB RESOURCE DEFINITION CONTAINS THE NAME OF A CLIENT AND A FILESET TO BACKUP, THE SCHEDULE FOR THE JOB,
# WHERE THE DATA ARE TO BE STORED, AND WHAT MEDIA POOL CAN BE USED.
Job {
  # THE JOB NAME. THIS NAME CAN BE SPECIFIED ON THE RUN COMMAND IN THE CONSOLE PROGRAM TO START A JOB.
  Name = "Catalog-Backup"
  # IF A JOBDEFS-RESOURCE-NAME IS SPECIFIED, ALL THE VALUES CONTAINED IN THE NAMED JOBDEFS RESOURCE WILL BE USED AS THE DEFAULTS FOR THE CURRENT JOB.
  JobDefs = "Default-Linux"
  # THE LEVEL DIRECTIVE SPECIFIES THE DEFAULT JOB LEVEL TO BE RUN. EACH DIFFERENT JOB TYPE (BACKUP, RESTORE, ...) HAS A DIFFERENT SET OF LEVELS THAT CAN BE SPECIFIED.
  Level = Full
  # THE FILESET DIRECTIVE SPECIFIES THE FILESET THAT WILL BE USED IN THE CURRENT JOB.
  FileSet = "Catalog"
  # THE SCHEDULE DIRECTIVE DEFINES WHAT SCHEDULE IS TO BE USED FOR THE JOB.
  Schedule = "Catalog-Cycle"
  # THE SPECIFIED COMMAND IS RUN AS AN EXTERNAL PROGRAM PRIOR TO RUNNING THE CURRENT JOB.
  RunBeforeJob = "${BACULA_BASE}/scripts/make_catalog_backup.pl Catalog"
  # THE WRITEBOOTSTRAP DIRECTIVE SPECIFIES A FILE NAME WHERE BACULA WILL WRITE A BOOTSTRAP FILE FOR EACH BACKUP JOB RUN.
  Write Bootstrap = "${BACULA_WD}/%c.bsr"
  # THIS DIRECTIVE PERMITS YOU TO CONTROL THE ORDER IN WHICH YOUR JOBS WILL BE RUN BY SPECIFYING A POSITIVE NON-ZERO NUMBER.
  # THE HIGHER THE NUMBER, THE LOWER THE JOB PRIORITY.
  Priority = 11
}

# NEEDS ONLY ONE JOB CONFIGURATION TO RESTORE
Job {
  # THE JOB NAME. THIS NAME CAN BE SPECIFIED ON THE RUN COMMAND IN THE CONSOLE PROGRAM TO START A JOB.
  Name = "Restore-Files"
  # THE TYPE DIRECTIVE SPECIFIES THE JOB TYPE, WHICH MAY BE ONE OF THE FOLLOWING: BACKUP, RESTORE, VERIFY, OR ADMIN.
  Type = Restore
  # THE CLIENT DIRECTIVE SPECIFIES THE CLIENT (FILE DAEMON) THAT WILL BE USED IN THE CURRENT JOB.
  Client = bacula-fd
  # THE FILESET DIRECTIVE SPECIFIES THE FILESET THAT WILL BE USED IN THE CURRENT JOB.
  FileSet = "Default-Linux"
  # THE STORAGE DIRECTIVE DEFINES THE NAME OF THE STORAGE SERVICES WHERE YOU WANT TO BACKUP THE FILESET DATA.
  Storage = Default-Storage
  # THE POOL DIRECTIVE DEFINES THE POOL OF VOLUMES WHERE YOUR DATA CAN BE BACKED UP.
  Pool = Default-Pool
  # THE MESSAGES DIRECTIVE DEFINES WHAT MESSAGES RESOURCE SHOULD BE USED FOR THIS JOB, AND THUS HOW AND WHERE THE VARIOUS MESSAGES ARE TO BE DELIVERED.
  Messages = Standard
  # THIS DIRECTIVE APPLIES ONLY TO A RESTORE JOB AND SPECIFIES A PREFIX TO THE DIRECTORY NAME OF ALL FILES BEING RESTORED.
  Where = /tmp/bacula-restores
}

Job {
  # THE JOB NAME. THIS NAME CAN BE SPECIFIED ON THE RUN COMMAND IN THE CONSOLE PROGRAM TO START A JOB.
  Name = "Director-Backup"
  # IF A JOBDEFS-RESOURCE-NAME IS SPECIFIED, ALL THE VALUES CONTAINED IN THE NAMED JOBDEFS RESOURCE WILL BE USED AS THE DEFAULTS FOR THE CURRENT JOB.
  JobDefs = "Default-Linux"
  # THE CLIENT DIRECTIVE SPECIFIES THE CLIENT (FILE DAEMON) THAT WILL BE USED IN THE CURRENT JOB.
  Client = bacula-fd
  # THE STORAGE DIRECTIVE DEFINES THE NAME OF THE STORAGE SERVICES WHERE YOU WANT TO BACKUP THE FILESET DATA.
  Storage = Default-Storage
  # THE POOL DIRECTIVE DEFINES THE POOL OF VOLUMES WHERE YOUR DATA CAN BE BACKED UP.
  Pool = Default-Pool
}

Client {
  # THE CLIENT NAME WHICH WILL BE USED IN THE JOB RESOURCE DIRECTIVE OR IN THE CONSOLE RUN COMMAND.
  Name = bacula-fd
  # WHERE THE ADDRESS IS A HOST NAME, A FULLY QUALIFIED DOMAIN NAME, OR A NETWORK ADDRESS IN DOTTED QUAD NOTATION FOR A BACULA FILE SERVER DAEMON.
  Address = ${BACULA_IP}
  # THIS IS THE PASSWORD TO BE USED WHEN ESTABLISHING A CONNECTION WITH THE FILE SERVICES, SO THE CLIENT CONFIGURATION FILE ON THE MACHINE TO BE BACKED UP
  # MUST HAVE THE SAME PASSWORD DEFINED FOR THIS DIRECTOR.
  Password = "${BFD_PASSWORD}"
  # FILE WITH THE RETENTION PERIOD
  @${BACULA_BASE}/clients-jobs/monthly-client
}
EOF


### CREATING THE DEVICE CONFIGURATION FILE
${ECHO} -e "${GREEN} CREATING THE DEVICE CONFIGURATION FILE ${CLOSE}"

${CAT} << EOF > ${BACULA_BASE}/devices/default-device.conf
# ${BACULA_BASE}/devices/default-device.conf
# http://www.bacula.org/5.2.x-manuals/en/main/main/Storage_Daemon_Configuratio.html#SECTION001630000000000000000
# THE DEVICE RESOURCE SPECIFIES THE DETAILS OF EACH DEVICE (NORMALLY A TAPE DRIVE) THAT CAN BE USED BY THE STORAGE DAEMON.
# THERE MAY BE MULTIPLE DEVICE RESOURCES FOR A SINGLE STORAGE DAEMON.
Device {
  # SPECIFIES THE NAME THAT THE DIRECTOR WILL USE WHEN ASKING TO BACKUP OR RESTORE TO OR FROM TO THIS DEVICE.
  Name = Default-Device
  # THE SPECIFIED NAME-STRING NAMES THE TYPE OF MEDIA SUPPORTED BY THIS DEVICE, FOR EXAMPLE, "DLT7000".
  Media Type = File
  # THE SPECIFIED NAME-STRING GIVES THE SYSTEM FILE NAME OF THE STORAGE DEVICE MANAGED BY THIS STORAGE DAEMON.
  Archive Device = ${BACULA_ST}/default
  # LABEL MEDIA THAT WILL BE USED BY BACULA
  LabelMedia = yes;
  # IF YES, THE ARCHIVE DEVICE IS ASSUMED TO BE A RANDOM ACCESS MEDIUM WHICH SUPPORTS THE LSEEK
  Random Access = Yes;
  # THE STORAGE DAEMON WILL SUBMIT A MOUNT COMMAND BEFORE ATTEMPTING TO OPEN THE DEVICE
  AutomaticMount = yes;
  # IF YES, THIS DEVICE SUPPORTS REMOVABLE MEDIA (FOR EXAMPLE, TAPES OR CDS).
  RemovableMedia = no;
  # IF YES, BACULA WILL ALWAYS KEEP THE DEVICE OPEN UNLESS SPECIFICALLY UNMOUNTED BY THE CONSOLE PROGRAM.
  AlwaysOpen = no;
}
EOF

###  CREATING THE FILESET CONFIGURATION FILES
${ECHO} -e "${GREEN} CREATING THE FILESET CONFIGURATION FILES ${CLOSE}"

${CAT} << EOF > ${BACULA_BASE}/filesets/catalog.conf
# ${BACULA_BASE}/filesets/catalog.conf
# THE FILESET RESOURCE DEFINES WHAT FILES ARE TO BE INCLUDED OR EXCLUDED IN A BACKUP JOB.
# A FILESET RESOURCE IS REQUIRED FOR EACH BACKUP JOB. IT CONSISTS OF A LIST OF FILES OR DIRECTORIES TO BE INCLUDED,
# A LIST OF FILES OR DIRECTORIES TO BE EXCLUDED AND THE VARIOUS BACKUP OPTIONS SUCH AS COMPRESSION, ENCRYPTION, AND SIGNATURES THAT ARE TO BE APPLIED TO EACH FILE.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001470000000000000000
FileSet {
  # THE NAME OF THE FILESET RESOURCE.
  Name = "Catalog"
  # THE INCLUDE RESOURCE MUST CONTAIN A LIST OF DIRECTORIES AND/OR FILES TO BE PROCESSED IN THE BACKUP JOB.
  # NORMALLY, ALL FILES FOUND IN ALL SUBDIRECTORIES OF ANY DIRECTORY IN THE INCLUDE FILE LIST WILL BE BACKED UP.
  Include {
          Options {
                  # AN SHA1 SIGNATURE WILL BE COMPUTED FOR ALL THE SHA1 ALGORITHM IS PURPORTED TO BE SOME WHAT SLOWER THAN THE MD5 ALGORITHM,
                  # BUT AT THE SAME TIME IS SIGNIFICANTLY BETTER FROM A CRYPTOGRAPHIC POINT OF VIEW (I.E. MUCH FEWER COLLISIONS, MUCH LOWER PROBABILITY OF BEING HACKED.)
                  # IT ADDS FOUR MORE BYTES THAN THE MD5 SIGNATURE.
                  signature = SHA1
                  # ALL FILES SAVED WILL BE SOFTWARE COMPRESSED USING THE GNU ZIP COMPRESSION FORMAT.
                  compression = GZIP
                  # THE OPTIONS LETTERS SPECIFIED ARE USED WHEN RUNNING A VERIFY LEVEL=CATALOG AS WELL AS THE DISKTOCATALOG LEVEL JOB.
                  # COMPARE PERMISSION BITS, INODES, NUMBER OF LINKS, SIZE, AND SHA1 CHANGES.
                  verify = pins1
                  # IF SET TO YES (THE DEFAULT), BACULA WILL REMAIN ON A SINGLE FILE SYSTEM.
                  onefs = no
                  # THE DEFAULT IS NO. IF THIS OPTION IS SET TO YES, AND YOU HAVE THE POSIX LIBACL INSTALLED ON YOUR LINUX SYSTEM,
                  # BACULA WILL BACKUP THE FILE AND DIRECTORY UNIX ACCESS CONTROL LISTS (ACL) AS DEFINED IN IEEE STD 1003.1E DRAFT 17 AND "POSIX.1E" (ABANDONED).
                  aclsupport=yes
                  # THE DEFAULT IS NO. IF THIS OPTION IS SET TO YES, AND YOUR OPERATING SYSTEM SUPPORT EITHER SO CALLED EXTENDED ATTRIBUTES OR EXTENSIBLE ATTRIBUTES
                  # BACULA WILL BACKUP THE FILE AND DIRECTORY XATTR DATA. THIS FEATURE IS AVAILABLE ON UNIX ONLY AND DEPENDS ON SUPPORT OF SOME SPECIFIC LIBRARY CALLS IN LIBC.
                  xattrsupport=yes
          }
          # WILL BACKED UP THE BACULA FILES WITHOUT CRYPTOGRAFY, IN SOME CASES WHEN WE LOST THE WHOLE DISK
          # WE CAN ONLY RESTORE THE FILES WITH THE CRYPTOGRAFY KEY AND IF WE DO NOT HAVE IT WE WILL LOST ALL THE DATA
          File = "${BACULA_WD}/bacula.sql"
          }
}
EOF

${CAT} << EOF > ${BACULA_BASE}/filesets/default-linux.conf
# ${BACULA_BASE}/filesets/default-linux.conf
# THE FILESET RESOURCE DEFINES WHAT FILES ARE TO BE INCLUDED OR EXCLUDED IN A BACKUP JOB.
# A FILESET RESOURCE IS REQUIRED FOR EACH BACKUP JOB. IT CONSISTS OF A LIST OF FILES OR DIRECTORIES TO BE INCLUDED,
# A LIST OF FILES OR DIRECTORIES TO BE EXCLUDED AND THE VARIOUS BACKUP OPTIONS SUCH AS COMPRESSION, ENCRYPTION, AND SIGNATURES THAT ARE TO BE APPLIED TO EACH FILE.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001470000000000000000
FileSet {
  # THE NAME OF THE FILESET RESOURCE.
  Name = "Default-Linux"
  # THE INCLUDE RESOURCE MUST CONTAIN A LIST OF DIRECTORIES AND/OR FILES TO BE PROCESSED IN THE BACKUP JOB.
  # NORMALLY, ALL FILES FOUND IN ALL SUBDIRECTORIES OF ANY DIRECTORY IN THE INCLUDE FILE LIST WILL BE BACKED UP.
  Include {
          Options {
            # AN SHA1 SIGNATURE WILL BE COMPUTED FOR ALL THE SHA1 ALGORITHM IS PURPORTED TO BE SOME WHAT SLOWER THAN THE MD5 ALGORITHM,
            # BUT AT THE SAME TIME IS SIGNIFICANTLY BETTER FROM A CRYPTOGRAPHIC POINT OF VIEW (I.E. MUCH FEWER COLLISIONS, MUCH LOWER PROBABILITY OF BEING HACKED.)
            # IT ADDS FOUR MORE BYTES THAN THE MD5 SIGNATURE.
            signature = SHA1
            # ALL FILES SAVED WILL BE SOFTWARE COMPRESSED USING THE GNU ZIP COMPRESSION FORMAT.
            compression = GZIP
            # THE OPTIONS LETTERS SPECIFIED ARE USED WHEN RUNNING A VERIFY LEVEL=CATALOG AS WELL AS THE DISKTOCATALOG LEVEL JOB.
            # COMPARE PERMISSION BITS, INODES, NUMBER OF LINKS, SIZE, AND SHA1 CHANGES.
            verify = pins1
            # IF SET TO YES (THE DEFAULT), BACULA WILL REMAIN ON A SINGLE FILE SYSTEM.
            onefs = no
            # THE DEFAULT IS NO. IF THIS OPTION IS SET TO YES, AND YOU HAVE THE POSIX LIBACL INSTALLED ON YOUR LINUX SYSTEM,
            # BACULA WILL BACKUP THE FILE AND DIRECTORY UNIX ACCESS CONTROL LISTS (ACL) AS DEFINED IN IEEE STD 1003.1E DRAFT 17 AND "POSIX.1E" (ABANDONED).
            aclsupport=yes
            # THE DEFAULT IS NO. IF THIS OPTION IS SET TO YES, AND YOUR OPERATING SYSTEM SUPPORT EITHER SO CALLED EXTENDED ATTRIBUTES OR EXTENSIBLE ATTRIBUTES
            # BACULA WILL BACKUP THE FILE AND DIRECTORY XATTR DATA. THIS FEATURE IS AVAILABLE ON UNIX ONLY AND DEPENDS ON SUPPORT OF SOME SPECIFIC LIBRARY CALLS IN LIBC.
            xattrsupport=yes
          }
            File = /etc
            File = /root
            File = /var/log
            File = /home
        		File = /srv
        		File = /usr/share
          }
  # THE EXCLUDE RESOURCE MUST CONTAIN A LIST OF DIRECTORIES AND/OR FILES TO NOT BE PROCESSED IN THE BACKUP JOB.
  # NORMALLY, ALL FILES FOUND IN ALL SUBDIRECTORIES OF ANY DIRECTORY IN THE EXCLUDE FILE LIST WILL NOT BE BACKED UP.
  Exclude {
          File = ${BACULA_WD}
          File = /proc
          File = /tmp
          File = /.journal
          File = /.fsck
      		File = /srv/backup
      		File = /srv/mirrors
      		File = /srv/dump
          }
}
EOF

${CAT} << EOF > ${BACULA_BASE}/filesets/default-freebsd.conf
# ${BACULA_BASE}/filesets/default-freebsd.conf
# THE FILESET RESOURCE DEFINES WHAT FILES ARE TO BE INCLUDED OR EXCLUDED IN A BACKUP JOB.
# A FILESET RESOURCE IS REQUIRED FOR EACH BACKUP JOB. IT CONSISTS OF A LIST OF FILES OR DIRECTORIES TO BE INCLUDED,
# A LIST OF FILES OR DIRECTORIES TO BE EXCLUDED AND THE VARIOUS BACKUP OPTIONS SUCH AS COMPRESSION, ENCRYPTION, AND SIGNATURES THAT ARE TO BE APPLIED TO EACH FILE.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001470000000000000000
FileSet {
  # THE NAME OF THE FILESET RESOURCE.
  Name = "Default-FreeBSD"
  # THE INCLUDE RESOURCE MUST CONTAIN A LIST OF DIRECTORIES AND/OR FILES TO BE PROCESSED IN THE BACKUP JOB.
  # NORMALLY, ALL FILES FOUND IN ALL SUBDIRECTORIES OF ANY DIRECTORY IN THE INCLUDE FILE LIST WILL BE BACKED UP.
  Include {
          Options {
            # AN SHA1 SIGNATURE WILL BE COMPUTED FOR ALL THE SHA1 ALGORITHM IS PURPORTED TO BE SOME WHAT SLOWER THAN THE MD5 ALGORITHM,
            # BUT AT THE SAME TIME IS SIGNIFICANTLY BETTER FROM A CRYPTOGRAPHIC POINT OF VIEW (I.E. MUCH FEWER COLLISIONS, MUCH LOWER PROBABILITY OF BEING HACKED.)
            # IT ADDS FOUR MORE BYTES THAN THE MD5 SIGNATURE.
            signature = SHA1
            # ALL FILES SAVED WILL BE SOFTWARE COMPRESSED USING THE GNU ZIP COMPRESSION FORMAT.
            compression = GZIP
            # THE OPTIONS LETTERS SPECIFIED ARE USED WHEN RUNNING A VERIFY LEVEL=CATALOG AS WELL AS THE DISKTOCATALOG LEVEL JOB.
            # COMPARE PERMISSION BITS, INODES, NUMBER OF LINKS, SIZE, AND SHA1 CHANGES.
            verify = pins1
            # IF SET TO YES (THE DEFAULT), BACULA WILL REMAIN ON A SINGLE FILE SYSTEM.
            onefs = no
            # THE DEFAULT IS NO. IF THIS OPTION IS SET TO YES, AND YOU HAVE THE POSIX LIBACL INSTALLED ON YOUR LINUX SYSTEM,
            # BACULA WILL BACKUP THE FILE AND DIRECTORY UNIX ACCESS CONTROL LISTS (ACL) AS DEFINED IN IEEE STD 1003.1E DRAFT 17 AND "POSIX.1E" (ABANDONED).
            aclsupport=yes
            # THE DEFAULT IS NO. IF THIS OPTION IS SET TO YES, AND YOUR OPERATING SYSTEM SUPPORT EITHER SO CALLED EXTENDED ATTRIBUTES OR EXTENSIBLE ATTRIBUTES
            # BACULA WILL BACKUP THE FILE AND DIRECTORY XATTR DATA. THIS FEATURE IS AVAILABLE ON UNIX ONLY AND DEPENDS ON SUPPORT OF SOME SPECIFIC LIBRARY CALLS IN LIBC.
            xattrsupport=yes
          }
          File = /etc
          File = /root
          File = /var/log
          File = /home
          File = /usr/share
          File = /usr/local/etc
          File = /usr/local/share
          }
  # THE EXCLUDE RESOURCE MUST CONTAIN A LIST OF DIRECTORIES AND/OR FILES TO NOT BE PROCESSED IN THE BACKUP JOB.
  # NORMALLY, ALL FILES FOUND IN ALL SUBDIRECTORIES OF ANY DIRECTORY IN THE EXCLUDE FILE LIST WILL NOT BE BACKED UP.
  Exclude {
          File = /var/db/bacula
          File = /proc
          File = /tmp
          File = /.journal
          File = /.fsck
          File = /srv/backup
          File = /srv/mirrors
          File = /srv/dump
          }
}
EOF


${CAT} << EOF > ${BACULA_BASE}/filesets/default-windows.conf
# ${BACULA_BASE}/filesets/default-windows.conf
# THE FILESET RESOURCE DEFINES WHAT FILES ARE TO BE INCLUDED OR EXCLUDED IN A BACKUP JOB.
# A FILESET RESOURCE IS REQUIRED FOR EACH BACKUP JOB. IT CONSISTS OF A LIST OF FILES OR DIRECTORIES TO BE INCLUDED,
# A LIST OF FILES OR DIRECTORIES TO BE EXCLUDED AND THE VARIOUS BACKUP OPTIONS SUCH AS COMPRESSION, ENCRYPTION, AND SIGNATURES THAT ARE TO BE APPLIED TO EACH FILE.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001470000000000000000
FileSet {
  # THE NAME OF THE FILESET RESOURCE.
  Name = "Default-Windows"
  # IF THIS DIRECTIVE IS SET TO YES THE FILE DAEMON WILL BE NOTIFIED THAT THE USER WANTS TO USE A
  # VOLUME SHADOW COPY SERVICE (VSS) BACKUP FOR THIS JOB. THE DEFAULT IS YES.
  # THIS DIRECTIVE IS EFFECTIVE ONLY FOR VSS ENABLED WIN32 FILE DAEMONS. IT PERMITS A CONSISTENT COPY OF OPEN FILES TO BE MADE
  # FOR COOPERATING WRITER APPLICATIONS, AND FOR APPLICATIONS THAT ARE NOT VSS AWAY, BACULA CAN AT LEAST COPY OPEN FILES
  Enable VSS = yes
  # THE INCLUDE RESOURCE MUST CONTAIN A LIST OF DIRECTORIES AND/OR FILES TO BE PROCESSED IN THE BACKUP JOB.
  # NORMALLY, ALL FILES FOUND IN ALL SUBDIRECTORIES OF ANY DIRECTORY IN THE INCLUDE FILE LIST WILL BE BACKED UP.
  Include {
          Options {
            # AN SHA1 SIGNATURE WILL BE COMPUTED FOR ALL THE SHA1 ALGORITHM IS PURPORTED TO BE SOME WHAT SLOWER THAN THE MD5 ALGORITHM,
            # BUT AT THE SAME TIME IS SIGNIFICANTLY BETTER FROM A CRYPTOGRAPHIC POINT OF VIEW (I.E. MUCH FEWER COLLISIONS, MUCH LOWER PROBABILITY OF BEING HACKED.)
            # IT ADDS FOUR MORE BYTES THAN THE MD5 SIGNATURE.
            signature = SHA1
            # ALL FILES SAVED WILL BE SOFTWARE COMPRESSED USING THE GNU ZIP COMPRESSION FORMAT.
            compression = GZIP
            # THE OPTIONS LETTERS SPECIFIED ARE USED WHEN RUNNING A VERIFY LEVEL=CATALOG AS WELL AS THE DISKTOCATALOG LEVEL JOB.
            # COMPARE PERMISSION BITS, INODES, NUMBER OF LINKS, SIZE, AND SHA1 CHANGES.
            verify = pins1
            # IF SET TO YES (THE DEFAULT), BACULA WILL REMAIN ON A SINGLE FILE SYSTEM.
            onefs = no
          }
          File = "C:/"
          }
}
EOF

${CAT} << EOF > ${BACULA_BASE}/jobsdef/default-linux.conf
# ${BACULA_BASE}/jobsdef/default-linux.conf
# THE JOBDEFS RESOURCE PERMITS ALL THE SAME DIRECTIVES THAT CAN APPEAR IN A JOB RESOURCE.
# HOWEVER, A JOBDEFS RESOURCE DOES NOT CREATE A JOB, RATHER IT CAN BE REFERENCED WITHIN A JOB TO PROVIDE DEFAULTS FOR THAT JOB.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001440000000000000000
JobDefs {
  # THE NAME OF THE SCHEDULE BEING DEFINED.
  Name = "Default-Linux"
  # THE TYPE DIRECTIVE SPECIFIES THE JOB TYPE, WHICH MAY BE ONE OF THE FOLLOWING: BACKUP, RESTORE, VERIFY, OR ADMIN.
  Type = Backup
  # THE LEVEL DIRECTIVE SPECIFIES THE DEFAULT JOB LEVEL TO BE RUN. EACH DIFFERENT JOB TYPE (BACKUP, RESTORE, ...) HAS A DIFFERENT SET OF LEVELS THAT CAN BE SPECIFIED.
  Level = Incremental
  # THE CLIENT DIRECTIVE SPECIFIES THE CLIENT (FILE DAEMON) THAT WILL BE USED IN THE CURRENT JOB.
  Client = bacula-fd
  # THE FILESET DIRECTIVE SPECIFIES THE FILESET THAT WILL BE USED IN THE CURRENT JOB.
  FileSet = "Default-Linux"
  # THE SCHEDULE DIRECTIVE DEFINES WHAT SCHEDULE IS TO BE USED FOR THE JOB.
  Schedule = "Monthly-Cycle-Linux"
  # THE STORAGE DIRECTIVE DEFINES THE NAME OF THE STORAGE SERVICES WHERE YOU WANT TO BACKUP THE FILESET DATA.
  Storage = Default-Storage
  # THE MESSAGES DIRECTIVE DEFINES WHAT MESSAGES RESOURCE SHOULD BE USED FOR THIS JOB,
  # AND THUS HOW AND WHERE THE VARIOUS MESSAGES ARE TO BE DELIVERED.
  Messages = Standard
  # THE POOL DIRECTIVE DEFINES THE POOL OF VOLUMES WHERE YOUR DATA CAN BE BACKED UP.
  Pool = Default-Pool
  # THIS DIRECTIVE PERMITS YOU TO CONTROL THE ORDER IN WHICH YOUR JOBS WILL BE RUN BY SPECIFYING A POSITIVE NON-ZERO NUMBER.
  # THE HIGHER THE NUMBER, THE LOWER THE JOB PRIORITY.
  Priority = 10
  # THE WRITEBOOTSTRAP DIRECTIVE SPECIFIES A FILE NAME WHERE BACULA WILL WRITE A BOOTSTRAP FILE FOR EACH BACKUP JOB RUN.
  Write Bootstrap = "${BACULA_WD}/%c.bsr"
  # THIS DIRECTIVE IS ONLY IMPLEMENTED IN VERSION 2.5 AND LATER. WHEN SET TO YES (DEFAULT NO),
  # THIS JOB MAY RUN EVEN IF LOWER PRIORITY JOBS ARE ALREADY RUNNING.
  Allow Mixed Priority = yes
  # A DUPLICATE JOB IN THE SENSE WE USE IT HERE MEANS A SECOND OR SUBSEQUENT JOB WITH THE SAME NAME STARTS.
  Allow Duplicate Jobs = no
  # IF ALLOW DUPLICATES JOBS IS SET TO NO AND THIS DIRECTIVE IS SET TO YES,
  # BACULA WILL CHOOSE BETWEEN DUPLICATED JOBS THE ONE WITH THE HIGHEST LEVEL.
  Cancel Lower Level Duplicates = yes
}
EOF

${CAT} << EOF > ${BACULA_BASE}/jobsdef/default-freebsd.conf
# ${BACULA_BASE}/jobsdef/default-freebsd.conf
# THE JOBDEFS RESOURCE PERMITS ALL THE SAME DIRECTIVES THAT CAN APPEAR IN A JOB RESOURCE.
# HOWEVER, A JOBDEFS RESOURCE DOES NOT CREATE A JOB, RATHER IT CAN BE REFERENCED WITHIN A JOB TO PROVIDE DEFAULTS FOR THAT JOB.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001440000000000000000
JobDefs {
  # THE NAME OF THE SCHEDULE BEING DEFINED.
  Name = "Default-FreeBSD"
  # THE TYPE DIRECTIVE SPECIFIES THE JOB TYPE, WHICH MAY BE ONE OF THE FOLLOWING: BACKUP, RESTORE, VERIFY, OR ADMIN.
  Type = Backup
  # THE LEVEL DIRECTIVE SPECIFIES THE DEFAULT JOB LEVEL TO BE RUN. EACH DIFFERENT JOB TYPE (BACKUP, RESTORE, ...) HAS A DIFFERENT SET OF LEVELS THAT CAN BE SPECIFIED.
  Level = Incremental
  # THE CLIENT DIRECTIVE SPECIFIES THE CLIENT (FILE DAEMON) THAT WILL BE USED IN THE CURRENT JOB.
  Client = bacula-fd
  # THE FILESET DIRECTIVE SPECIFIES THE FILESET THAT WILL BE USED IN THE CURRENT JOB.
  FileSet = "Default-FreeBSD"
  # THE SCHEDULE DIRECTIVE DEFINES WHAT SCHEDULE IS TO BE USED FOR THE JOB.
  Schedule = "Monthly-Cycle-FreeBSD"
  # THE STORAGE DIRECTIVE DEFINES THE NAME OF THE STORAGE SERVICES WHERE YOU WANT TO BACKUP THE FILESET DATA.
  Storage = Default-Storage
  # THE MESSAGES DIRECTIVE DEFINES WHAT MESSAGES RESOURCE SHOULD BE USED FOR THIS JOB,
  # AND THUS HOW AND WHERE THE VARIOUS MESSAGES ARE TO BE DELIVERED.
  Messages = Standard
  # THE POOL DIRECTIVE DEFINES THE POOL OF VOLUMES WHERE YOUR DATA CAN BE BACKED UP.
  Pool = Default-Pool
  # THIS DIRECTIVE PERMITS YOU TO CONTROL THE ORDER IN WHICH YOUR JOBS WILL BE RUN BY SPECIFYING A POSITIVE NON-ZERO NUMBER.
  # THE HIGHER THE NUMBER, THE LOWER THE JOB PRIORITY.
  Priority = 10
  # THE WRITEBOOTSTRAP DIRECTIVE SPECIFIES A FILE NAME WHERE BACULA WILL WRITE A BOOTSTRAP FILE FOR EACH BACKUP JOB RUN.
  Write Bootstrap = "${BACULA_WD}/%c.bsr"
  # THIS DIRECTIVE IS ONLY IMPLEMENTED IN VERSION 2.5 AND LATER. WHEN SET TO YES (DEFAULT NO),
  # THIS JOB MAY RUN EVEN IF LOWER PRIORITY JOBS ARE ALREADY RUNNING.
  Allow Mixed Priority = yes
  # A DUPLICATE JOB IN THE SENSE WE USE IT HERE MEANS A SECOND OR SUBSEQUENT JOB WITH THE SAME NAME STARTS.
  Allow Duplicate Jobs = no
  # IF ALLOW DUPLICATES JOBS IS SET TO NO AND THIS DIRECTIVE IS SET TO YES,
  # BACULA WILL CHOOSE BETWEEN DUPLICATED JOBS THE ONE WITH THE HIGHEST LEVEL.
  Cancel Lower Level Duplicates = yes
}
EOF


${CAT} << EOF > ${BACULA_BASE}/jobsdef/default-windows.conf
# ${BACULA_BASE}/jobsdef/default-windows.conf
# THE JOBDEFS RESOURCE PERMITS ALL THE SAME DIRECTIVES THAT CAN APPEAR IN A JOB RESOURCE.
# HOWEVER, A JOBDEFS RESOURCE DOES NOT CREATE A JOB, RATHER IT CAN BE REFERENCED WITHIN A JOB TO PROVIDE DEFAULTS FOR THAT JOB.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001440000000000000000
JobDefs {
  # THE NAME OF THE SCHEDULE BEING DEFINED.
  Name = "Default-Windows"
  # THE TYPE DIRECTIVE SPECIFIES THE JOB TYPE, WHICH MAY BE ONE OF THE FOLLOWING: BACKUP, RESTORE, VERIFY, OR ADMIN.
  Type = Backup
  # THE LEVEL DIRECTIVE SPECIFIES THE DEFAULT JOB LEVEL TO BE RUN. EACH DIFFERENT JOB TYPE (BACKUP, RESTORE, ...) HAS A DIFFERENT SET OF LEVELS THAT CAN BE SPECIFIED.
  Level = Incremental
  # THE CLIENT DIRECTIVE SPECIFIES THE CLIENT (FILE DAEMON) THAT WILL BE USED IN THE CURRENT JOB.
  Client = bacula-fd
  # THE FILESET DIRECTIVE SPECIFIES THE FILESET THAT WILL BE USED IN THE CURRENT JOB.
  FileSet = "Default-Windows"
  # THE SCHEDULE DIRECTIVE DEFINES WHAT SCHEDULE IS TO BE USED FOR THE JOB.
  Schedule = "Monthly-Cycle-Linux"
  # THE STORAGE DIRECTIVE DEFINES THE NAME OF THE STORAGE SERVICES WHERE YOU WANT TO BACKUP THE FILESET DATA.
  Storage = Default-Storage
  # THE MESSAGES DIRECTIVE DEFINES WHAT MESSAGES RESOURCE SHOULD BE USED FOR THIS JOB,
  # AND THUS HOW AND WHERE THE VARIOUS MESSAGES ARE TO BE DELIVERED.
  Messages = Standard
  # THE POOL DIRECTIVE DEFINES THE POOL OF VOLUMES WHERE YOUR DATA CAN BE BACKED UP.
  Pool = Default-Pool
  # THIS DIRECTIVE PERMITS YOU TO CONTROL THE ORDER IN WHICH YOUR JOBS WILL BE RUN BY SPECIFYING A POSITIVE NON-ZERO NUMBER.
  # THE HIGHER THE NUMBER, THE LOWER THE JOB PRIORITY.
  Priority = 10
  # THE WRITEBOOTSTRAP DIRECTIVE SPECIFIES A FILE NAME WHERE BACULA WILL WRITE A BOOTSTRAP FILE FOR EACH BACKUP JOB RUN.
  Write Bootstrap = "${BACULA_WD}/%c.bsr"
  # THIS DIRECTIVE IS ONLY IMPLEMENTED IN VERSION 2.5 AND LATER. WHEN SET TO YES (DEFAULT NO),
  # THIS JOB MAY RUN EVEN IF LOWER PRIORITY JOBS ARE ALREADY RUNNING.
  Allow Mixed Priority = yes
  # A DUPLICATE JOB IN THE SENSE WE USE IT HERE MEANS A SECOND OR SUBSEQUENT JOB WITH THE SAME NAME STARTS.
  Allow Duplicate Jobs = no
  # IF ALLOW DUPLICATES JOBS IS SET TO NO AND THIS DIRECTIVE IS SET TO YES,
  # BACULA WILL CHOOSE BETWEEN DUPLICATED JOBS THE ONE WITH THE HIGHEST LEVEL.
  Cancel Lower Level Duplicates = yes
}
EOF

###  CREATING THE POOL CONFIGURATION FILES
${ECHO} -e "${GREEN} CREATING THE POOL CONFIGURATION FILES ${CLOSE}"

${CAT} << EOF > ${BACULA_BASE}/pools/default-pool.conf
# ${BACULA_BASE}/pools/default-pool.conf
# THE POOL RESOURCE DEFINES THE SET OF STORAGE VOLUMES (TAPES OR FILES) TO BE USED BY BACULA TO WRITE THE DATA.
# BY CONFIGURING DIFFERENT POOLS, YOU CAN DETERMINE WHICH SET OF VOLUMES (MEDIA) RECEIVES THE BACKUP DATA.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION0014150000000000000000
Pool {
  # THE NAME OF THE POOL. FOR MOST APPLICATIONS, YOU WILL USE THE DEFAULT POOL NAME DEFAULT.
  Name = Default-Pool
  # THIS DIRECTIVE DEFINES THE POOL TYPE, WHICH CORRESPONDS TO THE TYPE OF JOB BEING RUN.
  Pool Type = Backup
  # THIS DIRECTIVE SPECIFIES WHETHER OR NOT PURGED VOLUMES MAY BE RECYCLED.
  # IF IT IS SET TO YES (DEFAULT) AND BACULA NEEDS A VOLUME BUT FINDS NONE THAT ARE APPENDABLE, IT WILL SEARCH FOR AND RECYCLE (REUSE) PURGED VOLUMES
  Recycle = yes
  # IF AUTOPRUNE IS SET TO YES (DEFAULT), BACULA (VERSION 1.20 OR GREATER) WILL AUTOMATICALLY APPLY THE VOLUME RETENTION
  # PERIOD WHEN NEW VOLUME IS NEEDED AND NO APPENDABLE VOLUMES EXIST IN THE POOL.
  AutoPrune = yes
  # THE VOLUME RETENTION DIRECTIVE DEFINES THE LENGTH OF TIME THAT BACULA WILL KEEP RECORDS ASSOCIATED WITH THE VOLUME IN
  # THE CATALOG DATABASE AFTER THE END TIME OF EACH JOB WRITTEN TO THE VOLUME.
  Volume Retention = 1 month
  # THE VOLUME USE DURATION DIRECTIVE DEFINES THE TIME PERIOD THAT THE VOLUME CAN BE WRITTEN BEGINNING FROM THE TIME OF FIRST DATA WRITE TO THE VOLUME.
  Volume Use Duration = 7 days
  # THIS DIRECTIVE SPECIFIES THE MAXIMUM NUMBER OF BYTES THAT CAN BE WRITTEN TO THE VOLUME.
  # IF YOU SPECIFY ZERO (THE DEFAULT), THERE IS NO LIMIT EXCEPT THE PHYSICAL SIZE OF THE VOLUME.
  Maximum Volume Bytes = 20 Gb
  # THIS DIRECTIVE SPECIFIES THE MAXIMUM NUMBER OF VOLUMES (TAPES OR FILES) CONTAINED IN THE POOL.
  # THIS DIRECTIVE IS OPTIONAL, IF OMITTED OR SET TO ZERO, ANY NUMBER OF VOLUMES WILL BE PERMITTED.
  Maximum Volumes      = 10
  # THIS DIRECTIVE SPECIFIES THE FORMAT OF THE LABELS CONTAINED IN THIS POOL.
  LabelFormat          = "volume-default-"     # Nome Default do Volume
}
EOF

${CAT} << EOF > ${BACULA_BASE}/pools/scratch.conf
# ${BACULA_BASE}/pools/scratch.conf
# THE POOL RESOURCE DEFINES THE SET OF STORAGE VOLUMES (TAPES OR FILES) TO BE USED BY BACULA TO WRITE THE DATA.
# BY CONFIGURING DIFFERENT POOLS, YOU CAN DETERMINE WHICH SET OF VOLUMES (MEDIA) RECEIVES THE BACKUP DATA.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION0014150000000000000000
Pool {
  # THE NAME OF THE POOL. FOR MOST APPLICATIONS, YOU WILL USE THE DEFAULT POOL NAME DEFAULT.
  Name = Scratch
  # THIS DIRECTIVE DEFINES THE POOL TYPE, WHICH CORRESPONDS TO THE TYPE OF JOB BEING RUN.
  Pool Type = Backup
}
EOF

###  CREATING THE SCHEDULE CONFIGURATION FILES
${ECHO} -e "${GREEN} CREATING THE SCHEDULE CONFIGURATION FILES ${CLOSE}"

${CAT} << EOF > ${BACULA_BASE}/schedules/catalog.conf
# ${BACULA_BASE}/schedules/catalog.conf
# THE SCHEDULE RESOURCE PROVIDES A MEANS OF AUTOMATICALLY SCHEDULING A JOB AS WELL AS THE ABILITY TO OVERRIDE THE DEFAULT LEVEL,
# POOL, STORAGE AND MESSAGES RESOURCES. IF A SCHEDULE RESOURCE IS NOT REFERENCED IN A JOB, THE JOB CAN ONLY BE RUN MANUALLY.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001450000000000000000
Schedule {
  # THE NAME OF THE SCHEDULE BEING DEFINED.
  Name = "Catalog-Cycle"
  # THE RUN DIRECTIVE DEFINES WHEN A JOB IS TO BE RUN, AND WHAT OVERRIDES IF ANY TO APPLY.
  # YOU MAY SPECIFY MULTIPLE RUN DIRECTIVES WITHIN A SCHEDULE RESOURCE.
  # LEVEL=FULL IS ALL FILES IN THE FILESET WHETHER OR NOT THEY HAVE CHANGED.
  # LEVEL=INCREMENTAL IS ALL FILES THAT HAVE CHANGED SINCE THE LAST BACKUP.
  # BASICALLY, YOU MUST SUPPLY A MONTH, DAY, HOUR, AND MINUTE THE JOB IS TO BE RUN.
  # OF THESE FOUR ITEMS TO BE SPECIFIED, DAY IS SPECIAL IN THAT YOU MAY EITHER SPECIFY A DAY OF THE MONTH SUCH AS 1, 2, ... 31,
  # OR YOU MAY SPECIFY A DAY OF THE WEEK SUCH AS MONDAY, TUESDAY, ... SUNDAY. FINALLY, YOU MAY ALSO SPECIFY A WEEK QUALIFIER TO
  # RESTRICT THE SCHEDULE TO THE FIRST, SECOND, THIRD, FOURTH, OR FIFTH WEEK OF THE MONTH.
  # ACCORDING TO THE NIST (US NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY), 12AM AND 12PM ARE AMBIGUOUS AND CAN BE DEFINED TO ANYTHING.
  # HOWEVER, 12:01AM IS THE SAME AS 00:01 AND 12:01PM IS THE SAME AS 12:01, SO BACULA DEFINES 12AM AS 00:00 (MIDNIGHT) AND 12PM AS 12:00 (NOON).
  # YOU CAN AVOID THIS ABIGUITY (CONFUSION) BY USING 24 HOUR TIME SPECIFICATIONS (I.E. NO AM/PM). THIS IS THE DEFINITION IN BACULA VERSION 2.0.3 AND LATER.
  Run = Level=Full sun-sat at 09:15
}
EOF

${CAT} << EOF > ${BACULA_BASE}/schedules/monthly-cycle-linux.conf
# ${BACULA_BASE}/schedules/monthly-cycle-linux.conf
# THE SCHEDULE RESOURCE PROVIDES A MEANS OF AUTOMATICALLY SCHEDULING A JOB AS WELL AS THE ABILITY TO OVERRIDE THE DEFAULT LEVEL,
# POOL, STORAGE AND MESSAGES RESOURCES. IF A SCHEDULE RESOURCE IS NOT REFERENCED IN A JOB, THE JOB CAN ONLY BE RUN MANUALLY.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001450000000000000000
Schedule {
  # THE NAME OF THE SCHEDULE BEING DEFINED.
  Name = "Monthly-Cycle-Linux"
  # THE RUN DIRECTIVE DEFINES WHEN A JOB IS TO BE RUN, AND WHAT OVERRIDES IF ANY TO APPLY.
  # YOU MAY SPECIFY MULTIPLE RUN DIRECTIVES WITHIN A SCHEDULE RESOURCE.
  # LEVEL=FULL IS ALL FILES IN THE FILESET WHETHER OR NOT THEY HAVE CHANGED.
  # LEVEL=INCREMENTAL IS ALL FILES THAT HAVE CHANGED SINCE THE LAST BACKUP.
  # BASICALLY, YOU MUST SUPPLY A MONTH, DAY, HOUR, AND MINUTE THE JOB IS TO BE RUN.
  # OF THESE FOUR ITEMS TO BE SPECIFIED, DAY IS SPECIAL IN THAT YOU MAY EITHER SPECIFY A DAY OF THE MONTH SUCH AS 1, 2, ... 31,
  # OR YOU MAY SPECIFY A DAY OF THE WEEK SUCH AS MONDAY, TUESDAY, ... SUNDAY. FINALLY, YOU MAY ALSO SPECIFY A WEEK QUALIFIER TO
  # RESTRICT THE SCHEDULE TO THE FIRST, SECOND, THIRD, FOURTH, OR FIFTH WEEK OF THE MONTH.
  # ACCORDING TO THE NIST (US NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY), 12AM AND 12PM ARE AMBIGUOUS AND CAN BE DEFINED TO ANYTHING.
  # HOWEVER, 12:01AM IS THE SAME AS 00:01 AND 12:01PM IS THE SAME AS 12:01, SO BACULA DEFINES 12AM AS 00:00 (MIDNIGHT) AND 12PM AS 12:00 (NOON).
  # YOU CAN AVOID THIS ABIGUITY (CONFUSION) BY USING 24 HOUR TIME SPECIFICATIONS (I.E. NO AM/PM). THIS IS THE DEFINITION IN BACULA VERSION 2.0.3 AND LATER.
  Run = Level=Full 1st sun at 09:00
  Run = Level=Incremental mon-sat at 19:00
}
EOF

${CAT} << EOF > ${BACULA_BASE}/schedules/weekly-cycle-linux.conf
# ${BACULA_BASE}/schedules/weekly-cycle-linux.conf
# THE SCHEDULE RESOURCE PROVIDES A MEANS OF AUTOMATICALLY SCHEDULING A JOB AS WELL AS THE ABILITY TO OVERRIDE THE DEFAULT LEVEL,
# POOL, STORAGE AND MESSAGES RESOURCES. IF A SCHEDULE RESOURCE IS NOT REFERENCED IN A JOB, THE JOB CAN ONLY BE RUN MANUALLY.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001450000000000000000
Schedule {
  # THE NAME OF THE SCHEDULE BEING DEFINED.
  Name = "Weekly-Cycle-Linux"
  # THE RUN DIRECTIVE DEFINES WHEN A JOB IS TO BE RUN, AND WHAT OVERRIDES IF ANY TO APPLY.
  # YOU MAY SPECIFY MULTIPLE RUN DIRECTIVES WITHIN A SCHEDULE RESOURCE.
  # LEVEL=FULL IS ALL FILES IN THE FILESET WHETHER OR NOT THEY HAVE CHANGED.
  # LEVEL=INCREMENTAL IS ALL FILES THAT HAVE CHANGED SINCE THE LAST BACKUP.
  # BASICALLY, YOU MUST SUPPLY A MONTH, DAY, HOUR, AND MINUTE THE JOB IS TO BE RUN.
  # OF THESE FOUR ITEMS TO BE SPECIFIED, DAY IS SPECIAL IN THAT YOU MAY EITHER SPECIFY A DAY OF THE MONTH SUCH AS 1, 2, ... 31,
  # OR YOU MAY SPECIFY A DAY OF THE WEEK SUCH AS MONDAY, TUESDAY, ... SUNDAY. FINALLY, YOU MAY ALSO SPECIFY A WEEK QUALIFIER TO
  # RESTRICT THE SCHEDULE TO THE FIRST, SECOND, THIRD, FOURTH, OR FIFTH WEEK OF THE MONTH.
  # ACCORDING TO THE NIST (US NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY), 12AM AND 12PM ARE AMBIGUOUS AND CAN BE DEFINED TO ANYTHING.
  # HOWEVER, 12:01AM IS THE SAME AS 00:01 AND 12:01PM IS THE SAME AS 12:01, SO BACULA DEFINES 12AM AS 00:00 (MIDNIGHT) AND 12PM AS 12:00 (NOON).
  # YOU CAN AVOID THIS ABIGUITY (CONFUSION) BY USING 24 HOUR TIME SPECIFICATIONS (I.E. NO AM/PM). THIS IS THE DEFINITION IN BACULA VERSION 2.0.3 AND LATER.
  Run = Level=Full sun at 09:00
  Run = Level=Incremental mon-sat at 19:00
}
EOF

${CAT} << EOF > ${BACULA_BASE}/schedules/monthly-cycle-freebsd.conf
# ${BACULA_BASE}/schedules/monthly-cycle-freebsd.conf
# THE SCHEDULE RESOURCE PROVIDES A MEANS OF AUTOMATICALLY SCHEDULING A JOB AS WELL AS THE ABILITY TO OVERRIDE THE DEFAULT LEVEL,
# POOL, STORAGE AND MESSAGES RESOURCES. IF A SCHEDULE RESOURCE IS NOT REFERENCED IN A JOB, THE JOB CAN ONLY BE RUN MANUALLY.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001450000000000000000
Schedule {
  # THE NAME OF THE SCHEDULE BEING DEFINED.
  Name = "Monthly-Cycle-FreeBSD"
  # THE RUN DIRECTIVE DEFINES WHEN A JOB IS TO BE RUN, AND WHAT OVERRIDES IF ANY TO APPLY.
  # YOU MAY SPECIFY MULTIPLE RUN DIRECTIVES WITHIN A SCHEDULE RESOURCE.
  # LEVEL=FULL IS ALL FILES IN THE FILESET WHETHER OR NOT THEY HAVE CHANGED.
  # LEVEL=INCREMENTAL IS ALL FILES THAT HAVE CHANGED SINCE THE LAST BACKUP.
  # BASICALLY, YOU MUST SUPPLY A MONTH, DAY, HOUR, AND MINUTE THE JOB IS TO BE RUN.
  # OF THESE FOUR ITEMS TO BE SPECIFIED, DAY IS SPECIAL IN THAT YOU MAY EITHER SPECIFY A DAY OF THE MONTH SUCH AS 1, 2, ... 31,
  # OR YOU MAY SPECIFY A DAY OF THE WEEK SUCH AS MONDAY, TUESDAY, ... SUNDAY. FINALLY, YOU MAY ALSO SPECIFY A WEEK QUALIFIER TO
  # RESTRICT THE SCHEDULE TO THE FIRST, SECOND, THIRD, FOURTH, OR FIFTH WEEK OF THE MONTH.
  # ACCORDING TO THE NIST (US NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY), 12AM AND 12PM ARE AMBIGUOUS AND CAN BE DEFINED TO ANYTHING.
  # HOWEVER, 12:01AM IS THE SAME AS 00:01 AND 12:01PM IS THE SAME AS 12:01, SO BACULA DEFINES 12AM AS 00:00 (MIDNIGHT) AND 12PM AS 12:00 (NOON).
  # YOU CAN AVOID THIS ABIGUITY (CONFUSION) BY USING 24 HOUR TIME SPECIFICATIONS (I.E. NO AM/PM). THIS IS THE DEFINITION IN BACULA VERSION 2.0.3 AND LATER.
  Run = Level=Full 1st sun at 09:00
  Run = Level=Incremental mon-sat at 19:00
}
EOF

${CAT} << EOF > ${BACULA_BASE}/schedules/weekly-cycle-freebsd.conf
# ${BACULA_BASE}/schedules/weekly-cycle-freebsd.conf
# THE SCHEDULE RESOURCE PROVIDES A MEANS OF AUTOMATICALLY SCHEDULING A JOB AS WELL AS THE ABILITY TO OVERRIDE THE DEFAULT LEVEL,
# POOL, STORAGE AND MESSAGES RESOURCES. IF A SCHEDULE RESOURCE IS NOT REFERENCED IN A JOB, THE JOB CAN ONLY BE RUN MANUALLY.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001450000000000000000
Schedule {
  # THE NAME OF THE SCHEDULE BEING DEFINED.
  Name = "Weekly-Cycle-FreeBSD"
  # THE RUN DIRECTIVE DEFINES WHEN A JOB IS TO BE RUN, AND WHAT OVERRIDES IF ANY TO APPLY.
  # YOU MAY SPECIFY MULTIPLE RUN DIRECTIVES WITHIN A SCHEDULE RESOURCE.
  # LEVEL=FULL IS ALL FILES IN THE FILESET WHETHER OR NOT THEY HAVE CHANGED.
  # LEVEL=INCREMENTAL IS ALL FILES THAT HAVE CHANGED SINCE THE LAST BACKUP.
  # BASICALLY, YOU MUST SUPPLY A MONTH, DAY, HOUR, AND MINUTE THE JOB IS TO BE RUN.
  # OF THESE FOUR ITEMS TO BE SPECIFIED, DAY IS SPECIAL IN THAT YOU MAY EITHER SPECIFY A DAY OF THE MONTH SUCH AS 1, 2, ... 31,
  # OR YOU MAY SPECIFY A DAY OF THE WEEK SUCH AS MONDAY, TUESDAY, ... SUNDAY. FINALLY, YOU MAY ALSO SPECIFY A WEEK QUALIFIER TO
  # RESTRICT THE SCHEDULE TO THE FIRST, SECOND, THIRD, FOURTH, OR FIFTH WEEK OF THE MONTH.
  # ACCORDING TO THE NIST (US NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY), 12AM AND 12PM ARE AMBIGUOUS AND CAN BE DEFINED TO ANYTHING.
  # HOWEVER, 12:01AM IS THE SAME AS 00:01 AND 12:01PM IS THE SAME AS 12:01, SO BACULA DEFINES 12AM AS 00:00 (MIDNIGHT) AND 12PM AS 12:00 (NOON).
  # YOU CAN AVOID THIS ABIGUITY (CONFUSION) BY USING 24 HOUR TIME SPECIFICATIONS (I.E. NO AM/PM). THIS IS THE DEFINITION IN BACULA VERSION 2.0.3 AND LATER.
  Run = Level=Full sun at 09:00
  Run = Level=Incremental mon-sat at 19:00
}
EOF


${CAT} << EOF > ${BACULA_BASE}/schedules/monthly-cycle-windows.conf
# ${BACULA_BASE}/schedules/monthly-cycle-windows.conf
# THE SCHEDULE RESOURCE PROVIDES A MEANS OF AUTOMATICALLY SCHEDULING A JOB AS WELL AS THE ABILITY TO OVERRIDE THE DEFAULT LEVEL,
# POOL, STORAGE AND MESSAGES RESOURCES. IF A SCHEDULE RESOURCE IS NOT REFERENCED IN A JOB, THE JOB CAN ONLY BE RUN MANUALLY.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001450000000000000000
Schedule {
  # THE NAME OF THE SCHEDULE BEING DEFINED.
  Name = "Monthly-Cycle-Windows"
  # THE RUN DIRECTIVE DEFINES WHEN A JOB IS TO BE RUN, AND WHAT OVERRIDES IF ANY TO APPLY.
  # YOU MAY SPECIFY MULTIPLE RUN DIRECTIVES WITHIN A SCHEDULE RESOURCE.
  # LEVEL=FULL IS ALL FILES IN THE FILESET WHETHER OR NOT THEY HAVE CHANGED.
  # LEVEL=INCREMENTAL IS ALL FILES THAT HAVE CHANGED SINCE THE LAST BACKUP.
  # BASICALLY, YOU MUST SUPPLY A MONTH, DAY, HOUR, AND MINUTE THE JOB IS TO BE RUN.
  # OF THESE FOUR ITEMS TO BE SPECIFIED, DAY IS SPECIAL IN THAT YOU MAY EITHER SPECIFY A DAY OF THE MONTH SUCH AS 1, 2, ... 31,
  # OR YOU MAY SPECIFY A DAY OF THE WEEK SUCH AS MONDAY, TUESDAY, ... SUNDAY. FINALLY, YOU MAY ALSO SPECIFY A WEEK QUALIFIER TO
  # RESTRICT THE SCHEDULE TO THE FIRST, SECOND, THIRD, FOURTH, OR FIFTH WEEK OF THE MONTH.
  # ACCORDING TO THE NIST (US NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY), 12AM AND 12PM ARE AMBIGUOUS AND CAN BE DEFINED TO ANYTHING.
  # HOWEVER, 12:01AM IS THE SAME AS 00:01 AND 12:01PM IS THE SAME AS 12:01, SO BACULA DEFINES 12AM AS 00:00 (MIDNIGHT) AND 12PM AS 12:00 (NOON).
  # YOU CAN AVOID THIS ABIGUITY (CONFUSION) BY USING 24 HOUR TIME SPECIFICATIONS (I.E. NO AM/PM). THIS IS THE DEFINITION IN BACULA VERSION 2.0.3 AND LATER.
  Run = Level=Full 1st sun at 09:00
  Run = Level=Incremental mon-sat at 19:00
}
EOF

${CAT} << EOF > ${BACULA_BASE}/schedules/weekly-cycle-windows.conf
# ${BACULA_BASE}/schedules/weekly-cycle-windows.conf
# THE SCHEDULE RESOURCE PROVIDES A MEANS OF AUTOMATICALLY SCHEDULING A JOB AS WELL AS THE ABILITY TO OVERRIDE THE DEFAULT LEVEL,
# POOL, STORAGE AND MESSAGES RESOURCES. IF A SCHEDULE RESOURCE IS NOT REFERENCED IN A JOB, THE JOB CAN ONLY BE RUN MANUALLY.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION001450000000000000000
Schedule {
  # THE NAME OF THE SCHEDULE BEING DEFINED.
  Name = "Weekly-Cycle-Windows"
  # THE RUN DIRECTIVE DEFINES WHEN A JOB IS TO BE RUN, AND WHAT OVERRIDES IF ANY TO APPLY.
  # YOU MAY SPECIFY MULTIPLE RUN DIRECTIVES WITHIN A SCHEDULE RESOURCE.
  # LEVEL=FULL IS ALL FILES IN THE FILESET WHETHER OR NOT THEY HAVE CHANGED.
  # LEVEL=INCREMENTAL IS ALL FILES THAT HAVE CHANGED SINCE THE LAST BACKUP.
  # BASICALLY, YOU MUST SUPPLY A MONTH, DAY, HOUR, AND MINUTE THE JOB IS TO BE RUN.
  # OF THESE FOUR ITEMS TO BE SPECIFIED, DAY IS SPECIAL IN THAT YOU MAY EITHER SPECIFY A DAY OF THE MONTH SUCH AS 1, 2, ... 31,
  # OR YOU MAY SPECIFY A DAY OF THE WEEK SUCH AS MONDAY, TUESDAY, ... SUNDAY. FINALLY, YOU MAY ALSO SPECIFY A WEEK QUALIFIER TO
  # RESTRICT THE SCHEDULE TO THE FIRST, SECOND, THIRD, FOURTH, OR FIFTH WEEK OF THE MONTH.
  # ACCORDING TO THE NIST (US NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY), 12AM AND 12PM ARE AMBIGUOUS AND CAN BE DEFINED TO ANYTHING.
  # HOWEVER, 12:01AM IS THE SAME AS 00:01 AND 12:01PM IS THE SAME AS 12:01, SO BACULA DEFINES 12AM AS 00:00 (MIDNIGHT) AND 12PM AS 12:00 (NOON).
  # YOU CAN AVOID THIS ABIGUITY (CONFUSION) BY USING 24 HOUR TIME SPECIFICATIONS (I.E. NO AM/PM). THIS IS THE DEFINITION IN BACULA VERSION 2.0.3 AND LATER.
  Run = Level=Full sun at 09:00
  Run = Level=Incremental mon-sat at 19:00
}
EOF

###  CREATING THE STORAGE CONFIGURATION FILES
${ECHO} -e "${GREEN} CREATING THE STORAGE CONFIGURATION FILES ${CLOSE}"

${CAT} << EOF > ${BACULA_BASE}/storages/default-storage.conf
# ${BACULA_BASE}/storages/default-storage.conf
# THE STORAGE DAEMON CONFIGURATION FILE HAS RELATIVELY FEW RESOURCE DEFINITIONS.
# HOWEVER, DUE TO THE GREAT VARIATION IN BACKUP MEDIA AND SYSTEM CAPABILITIES, THE STORAGE DAEMON MUST BE HIGHLY CONFIGURABLE.
# http://www.bacula.org/5.2.x-manuals/en/main/main/Configuring_Director.html#SECTION0014140000000000000000
Storage {
  # THE NAME OF THE STORAGE RESOURCE.
  Name = Default-Storage
  # WHERE THE ADDRESS IS A HOST NAME, A FULLY QUALIFIED DOMAIN NAME, OR AN IP ADDRESS.
  Address = ${BACULA_IP}
  # WHERE PORT IS THE PORT TO USE TO CONTACT THE STORAGE DAEMON FOR INFORMATION AND TO START JOBS.
  SDPort = 9103
  # THIS IS THE PASSWORD TO BE USED WHEN ESTABLISHING A CONNECTION WITH THE STORAGE SERVICES.
  # THIS SAME PASSWORD ALSO MUST APPEAR IN THE DIRECTOR RESOURCE OF THE STORAGE DAEMON'S CONFIGURATION FILE.
  Password = "${BSD_PASSWORD}"
  # THIS DIRECTIVE SPECIFIES THE STORAGE DAEMON'S NAME OF THE DEVICE RESOURCE TO BE USED FOR THE STORAGE.
  Device = Default-Device
  # THIS DIRECTIVE SPECIFIES THE MEDIA TYPE TO BE USED TO STORE THE DATA.
  # THIS IS AN ARBITRARY STRING OF CHARACTERS UP TO 127 MAXIMUM THAT YOU DEFINE. IT CAN BE ANYTHING YOU WANT.
  Media Type = File
  # WHERE NUMBER IS THE MAXIMUM NUMBER OF JOBS WITH THE CURRENT STORAGE RESOURCE THAT CAN RUN CONCURRENTLY.
  Maximum Concurrent Jobs = 10
}
EOF


###  CREATING THE SERVER CONFIGURATION KEY FILE
${ECHO} -e "${GREEN} CREATING THE SERVER CONFIGURATION KEY FILE ${CLOSE}"

${CAT} << EOF > ${BACULA_BASE}/keys/server.cnf
[req]
default_bits = 1024
encrypt_key = yes
distinguished_name = req_dn
x509_extensions = cert_type
prompt = no

[req_dn]
C=${COUNTRY_2LT}
ST=${STATE}
L=${CITY}
O=${ORG}
OU=${OU}
CN=${CLIENT}.${DOMAIN}
emailAddress=${EMAIL_CERT}

[cert_type]
nsCertType = server

[v3_ca]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer:always
basicConstraints=CA:true
EOF


###  CREATING THE CLIENT STRUCTURE DIRECTORY
${ECHO} -e "${GREEN} CREATING THE CLIENT STRUCTURE DIRECTORY ${CLOSE}"

BASE="${BBCLIENTS}/${CLIENT}"

if [ ! -d ${BASE} ]; then
	${MKDIR} -p ${BASE}
fi

###  CREATING THE CLIENT STRUCTURE DIRECTORY
${ECHO} -e "${GREEN} CREATING THE MASTER KEY ${CLOSE}"

${CD} ${BACULA_BASE}/keys/
${OPENSSL} genrsa -out master.key 2048 || { ${ECHO} -e "${RED}FAILED IN GENERATE THE MASTER KEY ${CLOSE}"; exit 1; }
${OPENSSL} req -new -x509 -out master.cert -key master.key -config ${BACULA_BASE}/keys/server.cnf -extensions v3_ca || { ${ECHO} -e "${RED}FAILED IN ASSIGN THE MASTER KEY ${CLOSE}"; exit 1; }


###  CREATING THE CLIENT STRUCTURE DIRECTORY
${ECHO} -e "${GREEN} CREATING THE CLIENT KEY ${CLOSE}"

${CD} ${BASE}
${OPENSSL} genrsa -out ${CLIENT}.key 2048 || { ${ECHO} -e "${RED}FAILED IN GENERATE THE MASTER KEY TO BACULA-FD ${CLOSE}"; exit 1; }
${OPENSSL} req -new -x509 -out ${CLIENT}.cert -key ${CLIENT}.key -config ${BACULA_BASE}/keys/server.cnf -extensions v3_ca || { ${ECHO} -e "${RED}FAILED IN ASSIGN THE MASTER KEY TO BACULA-FD ${CLOSE}"; exit 1; }
${CAT} ${CLIENT}.key ${CLIENT}.cert > ${CLIENT}.pem


###  SETTING UP THE BACULA PERMISSIONS
${ECHO} -e "${GREEN} SETTING UP THE BACULA PERMISSIONS ${CLOSE}"
${CHOWN} -R bacula:bacula ${BACULA_BASE}
${CHOWN} -R bacula:tape ${BACULA_ST}


###  CREATING THE PATCH FILES
${ECHO} -e "${GREEN} CREATING THE PATCH FILES ${CLOSE}"

${CAT} << EOF > bacula-dir.patch
--- bacula-dir	2014-08-19 09:48:44.886820180 -0300
+++ /etc/init.d/bacula-dir	2014-08-19 09:50:36.562959071 -0300
@@ -41,6 +41,10 @@

 PIDFILE=${BACULA_PID}/\${NAME}.\${BPORT}.pid

+if [ ! -d ${BACULA_PID} ]; then
+	mkdir -p ${BACULA_PID}
+fi
+
 if [ "x\${BUSER}" != "x" ]; then
    USERGRP="--chuid \${BUSER}"
    if [ "x\${BGROUP}" != "x" ]; then
EOF

${CAT} << EOF > bacula-fd.patch
--- bacula-fd	2014-08-19 09:48:44.886820180 -0300
+++ /etc/init.d/bacula-fd	2014-08-19 09:51:04.820824428 -0300
@@ -41,6 +41,10 @@

 PIDFILE=${BACULA_PID}/\${NAME}.\${BPORT}.pid

+if [ ! -d ${BACULA_PID} ]; then
+        mkdir -p ${BACULA_PID}
+fi
+
 if [ "x\${BUSER}" != "x" ]; then
    USERGRP="--chuid \${BUSER}"
    if [ "x\${BGROUP}" != "x" ]; then
EOF

${CAT} << EOF > bacula-sd.patch
--- bacula-sd	2014-08-19 09:48:44.886820180 -0300
+++ /etc/init.d/bacula-sd	2014-08-19 09:50:50.823825743 -0300
@@ -41,6 +41,10 @@

 PIDFILE=${BACULA_PID}/\${NAME}.\${BPORT}.pid

+if [ ! -d ${BACULA_PID} ]; then
+        mkdir -p ${BACULA_PID}
+fi
+
 if [ "x\${BUSER}" != "x" ]; then
    USERGRP="--chuid \${BUSER}"
    if [ "x\${BGROUP}" != "x" ]; then
EOF


###  APPLYING THE PATCH FILES
${ECHO} -e "${GREEN} APPLYING THE PATCH FILES ${CLOSE}"

${PATCH} -p1 /etc/init.d/bacula-dir -i bacula-dir.patch
${PATCH} -p1 /etc/init.d/bacula-sd  -i bacula-sd.patch
${PATCH} -p1 /etc/init.d/bacula-fd  -i bacula-fd.patch

${RM} -rf bacula-dir.patch bacula-sd.patch bacula-fd.patch

###  RESTARING THE SERVICES
${ECHO} -e "${GREEN} CREATING THE PATCH FILES ${CLOSE}"

/etc/init.d/bacula-dir restart
/etc/init.d/bacula-sd restart
/etc/init.d/bacula-fd restart


###  GETTING THE CLIENT SOURCE FILES
${ECHO} -e "${GREEN} GETTING THE CLIENT SOURCE FILES ${CLOSE}"

${CD} ${BACULA_PKG}
${WGET} -c  ${BACULA_SOURCES} || { ${ECHO} -e "${RED}FAILED ON GET BACULA SOURCES ${CLOSE}"; exit 1; }
${WGET} -c  ${BACULA_WIN64} || { ${ECHO} -e "${RED}FAILED ON GET BACULA SOURCES FOR WIN 64 ${CLOSE}"; exit 1; }
${WGET} -c  ${BACULA_WIN32} || { ${ECHO} -e "${RED}FAILED ON GET BACULA SOURCES FOR WIN 32 ${CLOSE}"; exit 1; }

###  CREATING SOME ADDITIONAL SCRIPTS
${ECHO} -e "${GREEN} CREATING SOME ADDITIONAL SCRIPTS ${CLOSE}"

${CAT} << EOF > ${BACULA_BKP_FILES}
#-------------------------------------------------------------------------
# ${BACULA_BKP_FILES}
#
# Site  : http://wiki.dksh.com.br
# Author : Douglas Q. dos Santos <douglas.dksh@gmail.com>
# Management: Douglas Q. dos Santos <douglas.dksh@gmail.com>
#
#-------------------------------------------------------------------------
# Note: This Shell Script will create a Bacula configuration file backup
# and will send the logs as email, this is a plus configuration that
# can help you to restore the Bacula server, try to use another storage
# or tape to store the files
#-------------------------------------------------------------------------
# History:
#
# Version 1:
# Data: 23/12/2015
# Description:  This Shell Script will create a Bacula configuration file
# backup on Debian GNU/Linux Wheezy
# Note: please use the following script to make sure that everything is ok.
# http://wiki.dksh.com.br/Downloads/scripts/ConfInicialWheezy.txt
# needs to convert the file like this: dos2unix ConfInicialWheezy.txt
# This script is part of:
# install-bacula-server-7.0.5-on-debian-wheezy-with-postgresql.sh
#--------------------------------------------------------------------------
#License: http://creativecommons.org/licenses/by-sa/3.0/legalcode
#
#--------------------------------------------------------------------------
clear

### EMAIL THAT WILL RECEIVE THE NOTIFICATION
EMAIL="${EMAIL_NOTIFICATION}"

### COMMANDS USED
RSYNC="/usr/bin/rsync"
MKDIR="/bin/mkdir"
CD="cd"
DU="/usr/bin/du"
RM="/bin/rm"
MAIL="/usr/bin/mail"
ECHO="/bin/echo"

### PATHS USED
LOGS="${LOGS_BKP_PLUS}"
BKP_DIR="${BKP_PLUS_PATH}"
BKP_BACULA_DIR="\${BKP_DIR}/etc"
BKP_CATALOG_DIR="\${BKP_DIR}/var/lib"
BACULA_DIR="/etc/bacula"
CATALOG_DIR="/var/lib/bacula"
DOMAIN="${DOMAIN}"

if [ -f  \${LOGS} ]; then
  \${RM} -rf \${LOGS}
fi

if [ ! -d \${BKP_DIR} ]; then
  \${MKDIR} -pv \${BKP_DIR} >> \${LOGS}
fi

if [ ! -d \${BKP_BACULA_DIR} ]; then
        \${MKDIR} -pv \${BKP_BACULA_DIR} >> \${LOGS}
fi

if [ ! -d \${BKP_CATALOG_DIR} ]; then
        \${MKDIR} -pv \${BKP_CATALOG_DIR} >> \${LOGS}
fi

${ECHO} "#### DATA START: \$(date) ###" >> \${LOGS}
${ECHO} "### SIZE: \$(\${DU} -sh \${BKP_DIR}) ###" >> \${LOGS}
\${CD} \${BKP_DIR}
\${RSYNC} -avzPH \${BACULA_DIR} \${BKP_BACULA_DIR} >> \${LOGS}
\${RSYNC} -avzPH \${CATALOG_DIR} \${BKP_CATALOG_DIR} >> \${LOGS}
${ECHO} "### SIZE: \$(\${DU} -sh \${BKP_DIR}) ###" >> \${LOGS}
${ECHO} "#### DATA END: \$(date) ###" >> \${LOGS}


\${MAIL} -s "Backup Bacula Files \${DOMAIN}: \$(hostname -i) " \${EMAIL} < \${LOGS}
EOF


${CAT} << EOF > ${BACULA_CLEAN_CACHE}
#!/bin/bash
# CLEAN UP CACHE
echo 3 > /proc/sys/vm/drop_caches
EOF


###  CREATING A NEW CRONTAB
${ECHO} -e "${GREEN} CREATING A NEW CRONTAB ${CLOSE}"

# SET UP THE CRONTAB
CRON=/tmp/cron

# TASKS SCHEDULED ON THE CRON
${CAT} << EOF > ${CRON}
# Minute Hour Day Month Day_of_the_Week User Command
#
# Minute - You can use the follow (0-59)
# Hour - You can use the follow (0-23)
# Day - You can use the follow (1-31)
# Month - You can use the follow (1-12)
# Day_of_the_Week - Day of the Week. (0-7; note.: 0 and 7 are Sunday).
# Use - This is optional, you can define the user that run the job
# Command - Command is the job that will be execute on the specified time
# i.e: For to Schedule a task to execute each 8 hours: * */8 * * * user /path/to/task
#
0 */8      *       *       *       /usr/bin/aptitude update
0 */6      *       *       *       /usr/sbin/ntpdate -u a.ntp.br
0 */12     *       *       *       /usr/bin/updatedb
0 */6      *       *       *       ${BACULA_CLEAN_CACHE}
0 6        *       *       *       ${BACULA_BKP_FILES}
EOF

${CHMOD} +x ${BACULA_BKP_FILES} ${BACULA_CLEAN_CACHE}

# REMOVE THE CURRENT CRONTAB
${CRONTAB} -r

# FOR TO SCHEDULE THE NEW CRONTAB
${CRONTAB} ${CRON}

# REMOVING THE TEMP CRONTAB
${RM} -rf ${CRON}

###  CREATING THE GMAIL RELAY WITH POSTFIX
${ECHO} -e "${GREEN} CREATING THE GMAIL RELAY WITH POSTFIX ${CLOSE}"

${SED} -i 's/relayhost*/#relayhost =/g' ${MAIN_CF_PATH}
${SED} -i 's/myhostname =/#myhostname = /g' ${MAIN_CF_PATH}
${SED} -i 's/mydestination =/#mydestination =/g' ${MAIN_CF_PATH}
${SED} -i 's/myorigin =/#myorigin =/g' ${MAIN_CF_PATH}

${ECHO} "#### GMAIL RELAY ####" >> ${MAIN_CF_PATH}
${ECHO} "myorigin = bacula.${DOMAIN}" >> ${MAIN_CF_PATH}
${ECHO} "myhostname = bacula.${DOMAIN}" >> ${MAIN_CF_PATH}
${ECHO} "mydestination = bacula.${DOMAIN}, localhost.${DOMAIN}, localhost" >> ${MAIN_CF_PATH}
${ECHO} "relayhost = ${GMAIL_RELAY_HOST}" >> ${MAIN_CF_PATH}
${ECHO} "smtp_use_tls=yes" >> ${MAIN_CF_PATH}
${ECHO} "smtp_sasl_auth_enable = yes" >> ${MAIN_CF_PATH}
${ECHO} "smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd" >> ${MAIN_CF_PATH}
${ECHO} "smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt" >> ${MAIN_CF_PATH}
${ECHO} "smtp_sasl_security_options =" >> ${MAIN_CF_PATH}
${ECHO} "#debug_peer_list=${GMAIL_DEBUG}" >> ${MAIN_CF_PATH}
${ECHO} "#debug_peer_level=3" >> ${MAIN_CF_PATH}
${ECHO} "#### GMAIL RELAY ####" >> ${MAIN_CF_PATH}
${ECHO} "${GMAIL_RELAY_HOST} ${GMAIL_USER}:${GMAIL_PASSWORD}" >> ${SASL_PASSWD}
${POSTMAP} ${SASL_PASSWD}
${CHOWN} postfix ${SASL_PASSWD}*
/etc/init.d/postfix reload

### INSTALLING THE BACULA WEB
${ECHO} -e "${GREEN} INSTALLING THE BACULA WEB ${CLOSE}"
${ECHO} -e "${GREEN} CONFIGURE THE DNS bacula-web.${DOMAIN} TO $(hostname -i) ${CLOSE}"

${APTITUDE} install apache2 php5 php5-pgsql php5-gd php5-mcrypt sudo php5-cli -y || { ${ECHO} -e "${RED}FAILED IN INSTALL THE BACULA WEB DEPENDENCIES ${CLOSE}"; exit 1; }
${CD} /var/www/
${RM} -rf index.html
${MKDIR} bacula-web
${CD} bacula-web
${WGET} -c ${BACULA_WEB_SOURCES}
${TAR} -xvf bacula-web-latest.tgz
${RM} -rf bacula-web-latest.tgz
${CHOWN} -R www-data:www-data /var/www/bacula-web
${CD} /var/www/bacula-web/application/config/

### CREATING THE CONFIGURATION FILE
${ECHO} -e "${GREEN} CREATING THE CONFIGURATION FILE ${CLOSE}"

${CAT} << EOF > /var/www/bacula-web/application/config/config.php
<?php

// Show inactive clients (false by default)
\$config['show_inactive_clients'] = true;

// Hide empty pools (displayed by default)
\$config['hide_empty_pools'] = false;

// Jobs per page (Jobs report page)
\$config['jobs_per_page'] = 25;

// Translations
\$config['language'] = 'en_US';

// en_US -> English - maintened by Davide Franco (bacula-dev@dflc.ch)
// es_ES -> Spanish - Mantained by Juan Luis Franc�s Jim�nez
// it_IT -> Italian - Mantained by Gian Domenico Messina (gianni.messina AT c-ict.it)
// fr_FR -> French - Mantained by Morgan LEFIEUX (comete AT daknet.org)
// de_DE -> German - Mantained by Florian Heigl
// sv_SV -> Swedish - Maintened by Daniel Nylander (po@danielnylander.se)
// pt_BR -> Portuguese Brazil - Last updated by J. Ritter (condector@gmail.com)
// nl_NL -> Dutch - last updated by Dion van Adrichem

// PostgreSQL bacula catalog
\$config[0]['label'] = 'Prod Server';
\$config[0]['host'] = 'localhost';
\$config[0]['login'] = 'bacula';
\$config[0]['password'] = '${DB_PASSWORD}';
\$config[0]['db_name'] = 'bacula';
\$config[0]['db_type'] = 'pgsql';
\$config[0]['db_port'] = '5432';

?>
EOF


### CREATING THE APACHE CONFIGURATION FILE
${ECHO} -e "${GREEN} CREATING THE APACHE CONFIGURATION FILE ${CLOSE}"

${CAT} << EOF > /etc/apache2/sites-available/bacula-web
<VirtualHost *:80>
  ServerAdmin webmaster@${DOMAIN}
  ServerName  bacula-web.${DOMAIN}
  DocumentRoot /var/www/bacula-web
  <Directory />
    Options +FollowSymLinks
    AllowOverride All
  </Directory>
  <Directory /var/www/bacula-web>
    Options -Indexes +FollowSymLinks +MultiViews
    AllowOverride All
    Order allow,deny
    allow from all
    AuthUserFile /etc/apache2/access/bacula-htpasswd
    AuthName "Bacula"
    AuthType Basic
    require valid-user
  </Directory>
  ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
  <Directory "/usr/lib/cgi-bin">
    AllowOverride None
    Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
    Order allow,deny
    Allow from all
  </Directory>
  ServerSignature Off
  LogLevel info
  ErrorLog /var/log/apache2/bacula-web.${DOMAIN}-error.log
  CustomLog /var/log/apache2/bacula-web.${DOMAIN}-access.log combined
</VirtualHost>
EOF

### CREATING THE BACULA WEB USER
${ECHO} -e "${GREEN} CREATING THE BACULA WEB USER: ${BACULA_WEB_USER} ${CLOSE}"

${MKDIR} /etc/apache2/access/
${HTPASSWD} -cdb /etc/apache2/access/bacula-htpasswd ${BACULA_WEB_USER} ${BACULA_WEB_PASSWORD}
${A2DISSITE} default
${A2ENSITE} bacula-web
/etc/init.d/apache2 restart


### INSTALLING THE BACULA WEB
${ECHO} -e "${GREEN} INSTALLING THE WEB BACULA  ${CLOSE}"
${ECHO} -e "${GREEN} CONFIGURE THE DNS webacula.${DOMAIN} TO $(hostname -i) ${CLOSE}"


### CHANGING THE PERMISSIONS
${ECHO} -e "${GREEN} CHANGING THE PERMISSIONS  ${CLOSE}"

${MKDIR} /var/www/webacula
${CD} /var/www/webacula
${WGET} -c ${WEB_BACULA_SOURCES}
${TAR} -xvf webacula-5.5.1.tar.gz
${MV} webacula-5.5.1/* .
${RM} -rf webacula-5.5.1*
${CHMOD} 770 /etc/bacula
${CHOWN} root:bacula /sbin/bconsole
${CHMOD} u=rwx,g=rx,o=  /sbin/bconsole
${CHOWN} root:bacula /etc/bacula/bconsole.conf
${CHMOD} u=rw,g=r,o= /etc/bacula/bconsole.conf
${USERMOD} -aG bacula www-data

${ECHO} "www-data ALL=NOPASSWD: /sbin/bconsole" >> /etc/sudoers
${ECHO}  "www-data ALL=NOPASSWD: /sbin/bacula-dir" >> /etc/sudoers


### CHANGING THE GLOBAL CONFIGURATION
${ECHO} -e "${GREEN} CHANGING THE GLOBAL CONFIGURATION  ${CLOSE}"

${SED} -i 's|;date.timezone =|date.timezone = America/Sao_Paulo|g' /etc/php5/apache2/php.ini
${SED} -i 's/max_execution_time = 30/max_execution_time = 3600/g' /etc/php5/apache2/php.ini
${SED} -i 's/db.adapter = PDO_MYSQL/db.adapter = PDO_PGSQL/g' /var/www/webacula/application/config.ini
${SED} -i 's/db.config.username = root/db.config.username = bacula/g' /var/www/webacula/application/config.ini
${SED} -i "s/db.config.password =/db.config.password = ${DB_PASSWORD}/g" /var/www/webacula/application/config.ini
${SED} -i 's|def.timezone = "Europe/Minsk"|def.timezone = "America/Sao_Paulo"|g' /var/www/webacula/application/config.ini
${SED} -i 's|bacula.bconsole    = "/opt/bacula/sbin/bconsole"|bacula.bconsole    = "/sbin/bconsole"|g' /var/www/webacula/application/config.ini
${SED} -i 's|bacula.bconsolecmd = "-n -c /opt/bacula/etc/bconsole.conf"|bacula.bconsolecmd = "-n -c /etc/bacula/bconsole.conf"|g' /var/www/webacula/application/config.ini


${CAT} << EOF > /var/www/webacula/install/db.conf
# See also application/config.ini

# bacula settings
db_name="bacula"
db_pwd="${DB_PASSWORD}"
db_user="bacula"

# !!! CHANGE_THIS !!!
webacula_root_pwd="${WEB_BACULA_PASSWORD}"
EOF


### LOADING THE TABLES
${ECHO} -e "${GREEN} LOADING THE TABLES  ${CLOSE}"

${SU} -l bacula -s /bin/sh -c "cd /var/www/webacula/install/PostgreSql/ && ./10_make_tables.sh"
${SU} -l bacula -s /bin/sh -c "cd /var/www/webacula/install/PostgreSql/ && ./20_acl_make_tables.sh"


### CHANGING THE PERMISSIONS
${ECHO} -e "${GREEN} CHANGING THE PERMISSIONS  ${CLOSE}"

${CHOWN} -R www-data:www-data /var/www/webacula

### CREATING THE APACHE CONFIGURATION FILE
${ECHO} -e "${GREEN} CREATING THE APACHE CONFIGURATION FILE ${CLOSE}"

${CAT} << EOF > /etc/apache2/sites-available/webacula
<VirtualHost *:80>
  ServerAdmin webmaster@${DOMAIN}
  ServerName webacula.${DOMAIN}
  DocumentRoot /var/www/webacula/html
  <Directory /var/www/webacula/html>
     Options -Indexes +FollowSymLinks
     AllowOverride All
     Order allow,deny
     Allow from all
  </Directory>
  <Directory /var/www/webacula/docs>
     Order deny,allow
     Deny from all
  </Directory>
  <Directory /var/www/webacula/application>
     Order deny,allow
     Deny from all
  </Directory>
  <Directory /var/www/webacula/languages>
     Order deny,allow
     Deny from all
  </Directory>
  <Directory /var/www/webacula/library>
     Order deny,allow
     Deny from all
  </Directory>
  <Directory /var/www/webacula/install>
     Order deny,allow
     Deny from all
  </Directory>
  <Directory /var/www/webacula/tests>
     Order deny,allow
     Deny from all
  </Directory>
  <Directory /var/www/webacula/data>
     Order deny,allow
     Deny from all
  </Directory>
  ServerSignature Off
  LogLevel info
  ErrorLog /var/log/apache2/webacula.${DOMAIN}-error.log
  LogLevel warn
  CustomLog /var/log/apache2/webacula.${DOMAIN}-access.log combined
</VirtualHost>
EOF

### CREATING THE HTACCESS CONFIGURATION FILE
${ECHO} -e "${GREEN} CREATING THE HTACCESS CONFIGURATION FILE ${CLOSE}"

${CAT} << EOF > /var/www/webacula/html/.htaccess
SetEnv APPLICATION_ENV production
RewriteEngine On
RewriteBase   /
RewriteCond %{REQUEST_FILENAME} -s [OR]
RewriteCond %{REQUEST_FILENAME} -l [OR]
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^.*\$ - [NC,L]
RewriteRule ^.*\$ index.php [NC,L]
php_flag magic_quotes_gpc off
php_flag register_globals off
EOF

### LOADING THE NEW VIRTUALHOST AND RELOADING THE APACHE
${ECHO} -e "${GREEN} LOADING THE NEW VIRTUALHOST AND RELOADING THE APACHE ${CLOSE}"

${A2ENSITE} webacula
${A2ENMOD} rewrite
/etc/init.d/apache2 restart

### INFORMATIONS
${ECHO} -e "${GREEN} PLEASE CHECK THE USER AND PASSWORD INFORMATION IN: ${PASSWORD_LOG} ${CLOSE}"
